unit == '' ~ Variance,
unit == 'thousands' ~ Variance/1e3,
unit == 'millions' ~ Variance/1e6,
unit == 'billions' ~ Variance/1e9,
T ~ -999),
q25 = case_when(
unit == '' ~ q25,
unit == 'thousands' ~ q25/1e3,
unit == 'millions' ~  q25/1e6,
unit == 'billions' ~  q25/1e9,
T ~ -999),
q75 = case_when(
unit == '' ~ q75,
unit == 'thousands' ~ q75/1e3,
unit == 'millions' ~  q75/1e6,
unit == 'billions' ~  q75/1e9,
T ~ -999),
Value = case_when(
unit == '' ~ Value,
unit == 'thousands' ~ Value/1e3,
unit == 'millions' ~ Value/1e6,
unit == 'billions' ~ Value/1e9,
T ~ -999),
upper = case_when(Statistic == 'Mean' ~ Value + Variance,
Statistic == 'Median' ~ q75,
Statistic == 'Total' ~ Value),
lower = case_when(Statistic == 'Mean' ~ Value - Variance,
Statistic == 'Median' ~ q25,
Statistic == 'Total' ~ Value)) %>%
data.frame()
# Data formatting for table#####
data_table <- mini_whiting %>%
mutate(Variance = round(Variance, 2),
q25 = round(q25,2),
q75 = round(q75,2),
Value = round(Value, 2)) %>%
data.frame()
# Filter by tab and metric for easy use in sidebar setup#####
prodTab <- filter(data, tab == 'Product')
prodTabval <- filter(prodTab, grepl('Production value', Metric))
prodTabwt <- filter(prodTab, grepl('Production weight', Metric))
prodTabprice <- filter(prodTab, grepl('Production price', Metric))
sumTab <- filter(data, tab == 'Summary')
sumTab$Metric <- sort(sumTab$Metric, decreasing = T)
tacTab <- filter(data, tab == 'TACU'  & Statistic == "Total")
tacTabval <- filter(tacTab, !grepl('Percent', Metric))
tacTabperc <- filter(tacTab, grepl('Percent', Metric))
unique(tacTab$Metric)
runApp()
unique(tacTab$Metric)
.libPaths("/usr/lib64/R/shiny_library/fisheye")
#detach(unload = TRUE)
library(shiny)
library(shinyjs)
library(shinyBS)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
library(DT)
mini_whiting <- readRDS("mini_whiting.RDS")
# Data formatting for plot ####
data <- mini_whiting %>%
mutate(Variance = case_when(
unit == '' ~ Variance,
unit == 'thousands' ~ Variance/1e3,
unit == 'millions' ~ Variance/1e6,
unit == 'billions' ~ Variance/1e9,
T ~ -999),
q25 = case_when(
unit == '' ~ q25,
unit == 'thousands' ~ q25/1e3,
unit == 'millions' ~  q25/1e6,
unit == 'billions' ~  q25/1e9,
T ~ -999),
q75 = case_when(
unit == '' ~ q75,
unit == 'thousands' ~ q75/1e3,
unit == 'millions' ~  q75/1e6,
unit == 'billions' ~  q75/1e9,
T ~ -999),
Value = case_when(
unit == '' ~ Value,
unit == 'thousands' ~ Value/1e3,
unit == 'millions' ~ Value/1e6,
unit == 'billions' ~ Value/1e9,
T ~ -999),
upper = case_when(Statistic == 'Mean' ~ Value + Variance,
Statistic == 'Median' ~ q75,
Statistic == 'Total' ~ Value),
lower = case_when(Statistic == 'Mean' ~ Value - Variance,
Statistic == 'Median' ~ q25,
Statistic == 'Total' ~ Value)) %>%
data.frame()
# Data formatting for table#####
data_table <- mini_whiting %>%
mutate(Variance = round(Variance, 2),
q25 = round(q25,2),
q75 = round(q75,2),
Value = round(Value, 2)) %>%
data.frame()
# Filter by tab and metric for easy use in sidebar setup#####
prodTab <- filter(data, tab == 'Product')
prodTabval <- filter(prodTab, grepl('Production value', Metric))
prodTabwt <- filter(prodTab, grepl('Production weight', Metric))
prodTabprice <- filter(prodTab, grepl('Production price', Metric))
sumTab <- filter(data, tab == 'Summary')
sumTab$Metric <- sort(sumTab$Metric, decreasing = T)
tacTab <- filter(data, tab == 'TACU'  & Statistic %in% c('Utilization by weight', 'Utilization by percent'))
tacTabval <- filter(tacTab, !grepl('Percent', Metric))
tacTabperc <- filter(tacTab, grepl('Percent', Metric))
unique(tacTab$Metric)
.libPaths("/usr/lib64/R/shiny_library/fisheye")
#detach(unload = TRUE)
library(shiny)
library(shinyjs)
library(shinyBS)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
library(DT)
mini_whiting <- readRDS("mini_whiting.RDS")
# Data formatting for plot ####
data <- mini_whiting %>%
mutate(Variance = case_when(
unit == '' ~ Variance,
unit == 'thousands' ~ Variance/1e3,
unit == 'millions' ~ Variance/1e6,
unit == 'billions' ~ Variance/1e9,
T ~ -999),
q25 = case_when(
unit == '' ~ q25,
unit == 'thousands' ~ q25/1e3,
unit == 'millions' ~  q25/1e6,
unit == 'billions' ~  q25/1e9,
T ~ -999),
q75 = case_when(
unit == '' ~ q75,
unit == 'thousands' ~ q75/1e3,
unit == 'millions' ~  q75/1e6,
unit == 'billions' ~  q75/1e9,
T ~ -999),
Value = case_when(
unit == '' ~ Value,
unit == 'thousands' ~ Value/1e3,
unit == 'millions' ~ Value/1e6,
unit == 'billions' ~ Value/1e9,
T ~ -999),
upper = case_when(Statistic == 'Mean' ~ Value + Variance,
Statistic == 'Median' ~ q75,
Statistic == 'Total' ~ Value),
lower = case_when(Statistic == 'Mean' ~ Value - Variance,
Statistic == 'Median' ~ q25,
Statistic == 'Total' ~ Value)) %>%
data.frame()
# Data formatting for table#####
data_table <- mini_whiting %>%
mutate(Variance = round(Variance, 2),
q25 = round(q25,2),
q75 = round(q75,2),
Value = round(Value, 2)) %>%
data.frame()
# Filter by tab and metric for easy use in sidebar setup#####
prodTab <- filter(data, tab == 'Product')
prodTabval <- filter(prodTab, grepl('Production value', Metric))
prodTabwt <- filter(prodTab, grepl('Production weight', Metric))
prodTabprice <- filter(prodTab, grepl('Production price', Metric))
sumTab <- filter(data, tab == 'Summary')
sumTab$Metric <- sort(sumTab$Metric, decreasing = T)
tacTab <- filter(data, tab == 'TACU'  & Statistic %in% c('Utilization by weight', 'Utilization by percent'))
tacTabval <- filter(tacTab, !grepl('Percent', Metric))
tacTabperc <- filter(tacTab, grepl('Percent', Metric))
unique(tacTab$Metric)
data_final_format <- data_final_allcombosnew %>%
rbind(tac_final, unused_tac) %>%
mutate(Value = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Markup')
& Sector == 'Catcher-Processor' ~ NA_real_,
T ~ Value),
Order = case_when(grepl('Surimi', Metric) ~ 1,
grepl('Fishmeal', Metric) ~ 2,
grepl('Fillet', Metric) ~ 3,
grepl('Headed-and-gutted', Metric) ~ 4,
grepl('Frozen whole/Round', Metric) ~ 5,
grepl('Minced', Metric) ~ 6,
grepl('Fish oil', Metric) ~ 7,
grepl('Unprocessed', Metric) ~ 8,
grepl('Other', Metric) ~ 9),
tab = case_when(grepl('Percent by value', Metric) ~ 'Not in use',
grepl('Percent by weight', Metric) ~ 'Not in use',
grepl('Roe', Metric) ~ 'Not in use',
grepl('Surimi', Metric) ~ 'Product',
grepl('Fishmeal', Metric) ~ 'Product',
grepl('Fillet', Metric) ~ 'Product',
grepl('Headed-and-gutted', Metric) ~ 'Product',
grepl('Frozen whole/Round', Metric) ~ 'Product',
grepl('Minced', Metric) ~ 'Product',
grepl('Fish oil', Metric) ~ 'Product',
grepl('Unprocessed', Metric) ~ 'Product',
grepl('Other', Metric) ~ 'Product',
grepl('Commercial catch', Metric) ~ 'TACU',
grepl('Unutilized allocation, post-reapportionment', Metric) ~ 'TACU',
grepl('Percent Commercial catch', Metric) ~ 'TACU',
grepl('Percent Unutilized allocation, post-reapportionment', Metric) ~ 'TACU',
grepl('Initial allocation', Metric) ~ 'TACU',
grepl('Final allocation', Metric) ~ 'TACU',
T ~ 'Summary')) %>%
group_by(Metric, Statistic) %>%
mutate(
unit = case_when(max(Value, na.rm = T) < 1e3 ~ '',
max(Value, na.rm = T) < 1e6 ~ 'thousands',
max(Value, na.rm = T) < 1e9 ~ 'millions',
max(Value, na.rm = T) < 1e12 ~ 'billions',
T ~ 'help'),
ylab = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Production value',
'Production price (per lb)', 'Markup') | grepl('Production value', Metric) |
grepl('Production price', Metric) ~
paste0(Metric, ": ", Statistic, " (", unit, " ", currentyear, " $)"),
Metric %in% c('Purchase (or catch) weight','Production weight') | grepl('Production weight', Metric) ~
paste0(Metric, ": ", Statistic, " (", unit, " lbs)"),
Metric == 'Recovery rate' | grepl('Percent', Metric) ~ Metric,
Metric == 'Total allowable catch, non-tribal' ~ paste0(Metric, ": Total (", unit, ")"),
T ~ paste0(Metric, " (", unit, ")")),
Statistic = case_when(Metric == 'Percent Commercial catch' ~ 'Utilization by percent',
Metric == 'Percent Unutilized allocation, post-reapportionment' ~ 'Utilization by percent',
(Metric == 'Commercial catch' & Statistic == 'Total') ~ 'Utilization by weight',
(Metric == 'Unutilized allocation, post-reapportionment' & Statistic == 'Total') ~ 'Utilization by weight',
T~ Statistic),
Metric = case_when(Metric == 'Percent Commercial catch' ~ 'Commercial catch',
Metric == 'Percent Unutilized allocation, post-reapportionment' ~ 'Unutilized allocation, post-reapportionment',
T ~ Metric)) %>% distinct() %>%
data.frame()
# if FR and vessels are on different years then need to make sure we don't show "all" for the most current year.
# Add impacts by rbind
final <- data_final_format %>%
mutate(rm = case_when(Sector == 'All' & Year > frcurrentyear & Metric != 'Total allowable catch, non-tribal' ~ 1,
T ~ 0)) %>%
filter(rm != 1) %>%
select(-rm) %>%
rbind(mscv_impacts) %>%
rbind(cp_impacts)
##-----------------------------##
# -------Compare function-----####
##-----------------------------##
mini_whiting <- readRDS("mini_whiting.RDS")
old <- mini_whiting %>%
select(-tab, -ylab) %>%
ungroup() %>%
mutate(Metric = case_when(Metric == 'Purchase cost' ~ 'Purchase value',
T ~ Metric),
N = as.numeric(N),
Year = as.numeric(Year))
new <- final %>%
select(-tab, -ylab) %>%
mutate(N = as.numeric(N),
Year = as.numeric(Year))
##
gg <- comparefun(old, new, c('N','Value','Variance', 'q25','q75'), 'wide')
# Check missing combos
gg2 <- filter(gg, combomiss == 'Missing combo', Metric != 'Recovery rate')
gg3 <- filter(gg, combomiss == 'Fine')
# units switched to millions because in 2018 shoreside had value of over million
gg2_ck <- filter(final, Metric == 'Other (Production value)' & Statistic == 'Mean')
thres <- filter(gg, Value_percDiff > 0.05)
##-----------------------------##
##Remove metrics that we dont want to include#####
##-----------------------------##
final <- filter(final, !Metric %in% c('Recovery rate'))
##------------------------------##
##Reorder by column name############
##------------------------------##
final <- final[c('Year','Sector','Metric','Statistic','N','Value','Variance','q25','q75','Order','tab','unit','ylab')]
##-----------------------------##
#----------Save data----------####
##---------------------------##
mini_whiting <- final
rownames(mini_whiting) <- NULL
saveRDS(mini_whiting, file = "mini_whiting.RDS")
runApp()
.libPaths("/usr/lib64/R/shiny_library/fisheye")
#detach(unload = TRUE)
library(shiny)
library(shinyjs)
library(shinyBS)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
library(DT)
mini_whiting <- readRDS("mini_whiting.RDS")
# Data formatting for plot ####
data <- mini_whiting %>%
mutate(Variance = case_when(
unit == '' ~ Variance,
unit == 'thousands' ~ Variance/1e3,
unit == 'millions' ~ Variance/1e6,
unit == 'billions' ~ Variance/1e9,
T ~ -999),
q25 = case_when(
unit == '' ~ q25,
unit == 'thousands' ~ q25/1e3,
unit == 'millions' ~  q25/1e6,
unit == 'billions' ~  q25/1e9,
T ~ -999),
q75 = case_when(
unit == '' ~ q75,
unit == 'thousands' ~ q75/1e3,
unit == 'millions' ~  q75/1e6,
unit == 'billions' ~  q75/1e9,
T ~ -999),
Value = case_when(
unit == '' ~ Value,
unit == 'thousands' ~ Value/1e3,
unit == 'millions' ~ Value/1e6,
unit == 'billions' ~ Value/1e9,
T ~ -999),
upper = case_when(Statistic == 'Mean' ~ Value + Variance,
Statistic == 'Median' ~ q75,
Statistic == 'Total' ~ Value),
lower = case_when(Statistic == 'Mean' ~ Value - Variance,
Statistic == 'Median' ~ q25,
Statistic == 'Total' ~ Value)) %>%
data.frame()
# Data formatting for table#####
data_table <- mini_whiting %>%
mutate(Variance = round(Variance, 2),
q25 = round(q25,2),
q75 = round(q75,2),
Value = round(Value, 2)) %>%
data.frame()
# Filter by tab and metric for easy use in sidebar setup#####
prodTab <- filter(data, tab == 'Product')
prodTabval <- filter(prodTab, grepl('Production value', Metric))
prodTabwt <- filter(prodTab, grepl('Production weight', Metric))
prodTabprice <- filter(prodTab, grepl('Production price', Metric))
sumTab <- filter(data, tab == 'Summary')
sumTab$Metric <- sort(sumTab$Metric, decreasing = T)
tacTab <- filter(data, tab == 'TACU'  & Statistic %in% c('Utilization by weight', 'Utilization by percent'))
tacTabval <- filter(tacTab, !grepl('Percent', Metric))
tacTabperc <- filter(tacTab, grepl('Percent', Metric))
unique(tacTab$Metric)
tacTab <- filter(data, tab == 'TACU' & Statistic %in% c('Utilization by weight', 'Utilization by percent'))
unique(tacTab$Metric)
data_final_format <- data_final_allcombosnew %>%
rbind(tac_final, unused_tac) %>%
mutate(Value = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Markup')
& Sector == 'Catcher-Processor' ~ NA_real_,
T ~ Value),
Order = case_when(grepl('Surimi', Metric) ~ 1,
grepl('Fishmeal', Metric) ~ 2,
grepl('Fillet', Metric) ~ 3,
grepl('Headed-and-gutted', Metric) ~ 4,
grepl('Frozen whole/Round', Metric) ~ 5,
grepl('Minced', Metric) ~ 6,
grepl('Fish oil', Metric) ~ 7,
grepl('Unprocessed', Metric) ~ 8,
grepl('Other', Metric) ~ 9),
tab = case_when(grepl('Percent by value', Metric) ~ 'Not in use',
grepl('Percent by weight', Metric) ~ 'Not in use',
grepl('Roe', Metric) ~ 'Not in use',
grepl('Surimi', Metric) ~ 'Product',
grepl('Fishmeal', Metric) ~ 'Product',
grepl('Fillet', Metric) ~ 'Product',
grepl('Headed-and-gutted', Metric) ~ 'Product',
grepl('Frozen whole/Round', Metric) ~ 'Product',
grepl('Minced', Metric) ~ 'Product',
grepl('Fish oil', Metric) ~ 'Product',
grepl('Unprocessed', Metric) ~ 'Product',
grepl('Other', Metric) ~ 'Product',
grepl('Commercial catch', Metric) ~ 'TACU',
grepl('Unutilized allocation, post-reapportionment', Metric) ~ 'TACU',
grepl('Percent Commercial catch', Metric) ~ 'TACU',
grepl('Percent Unutilized allocation, post-reapportionment', Metric) ~ 'TACU',
grepl('Initial allocation', Metric) ~ 'TACU',
grepl('Final allocation', Metric) ~ 'TACU',
T ~ 'Summary')) %>%
group_by(Metric, Statistic) %>%
mutate(
unit = case_when(max(Value, na.rm = T) < 1e3 ~ '',
max(Value, na.rm = T) < 1e6 ~ 'thousands',
max(Value, na.rm = T) < 1e9 ~ 'millions',
max(Value, na.rm = T) < 1e12 ~ 'billions',
T ~ 'help'),
ylab = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Production value',
'Production price (per lb)', 'Markup') | grepl('Production value', Metric) |
grepl('Production price', Metric) ~
paste0(Metric, ": ", Statistic, " (", unit, " ", currentyear, " $)"),
Metric %in% c('Purchase (or catch) weight','Production weight') | grepl('Production weight', Metric) ~
paste0(Metric, ": ", Statistic, " (", unit, " lbs)"),
Metric == 'Recovery rate' | grepl('Percent', Metric) ~ Metric,
Metric == 'Total allowable catch, non-tribal' ~ paste0(Metric, ": Total (", unit, ")"),
T ~ paste0(Metric, " (", unit, ")")),
Statistic = case_when(Metric == 'Percent Commercial catch' ~ 'Utilization by percent',
Metric == 'Percent Unutilized allocation, post-reapportionment' ~ 'Utilization by percent',
(Metric == 'Commercial catch' & Statistic == 'Total') ~ 'Utilization by weight',
(Metric == 'Unutilized allocation, post-reapportionment' & Statistic == 'Total') ~ 'Utilization by weight',
(Metric == 'Initial allocation' & Statistic == 'Total') ~ 'Utilization by weight',
(Metric == 'Final allocation' & Statistic == 'Total') ~ 'Utilization by weight',
T~ Statistic),
Metric = case_when(Metric == 'Percent Commercial catch' ~ 'Commercial catch',
Metric == 'Percent Unutilized allocation, post-reapportionment' ~ 'Unutilized allocation, post-reapportionment',
T ~ Metric)) %>% distinct() %>%
data.frame()
# if FR and vessels are on different years then need to make sure we don't show "all" for the most current year.
# Add impacts by rbind
final <- data_final_format %>%
mutate(rm = case_when(Sector == 'All' & Year > frcurrentyear & Metric != 'Total allowable catch, non-tribal' ~ 1,
T ~ 0)) %>%
filter(rm != 1) %>%
select(-rm) %>%
rbind(mscv_impacts) %>%
rbind(cp_impacts)
##-----------------------------##
# -------Compare function-----####
##-----------------------------##
mini_whiting <- readRDS("mini_whiting.RDS")
old <- mini_whiting %>%
select(-tab, -ylab) %>%
ungroup() %>%
mutate(Metric = case_when(Metric == 'Purchase cost' ~ 'Purchase value',
T ~ Metric),
N = as.numeric(N),
Year = as.numeric(Year))
new <- final %>%
select(-tab, -ylab) %>%
mutate(N = as.numeric(N),
Year = as.numeric(Year))
##
gg <- comparefun(old, new, c('N','Value','Variance', 'q25','q75'), 'wide')
# Check missing combos
gg2 <- filter(gg, combomiss == 'Missing combo', Metric != 'Recovery rate')
gg3 <- filter(gg, combomiss == 'Fine')
# units switched to millions because in 2018 shoreside had value of over million
gg2_ck <- filter(final, Metric == 'Other (Production value)' & Statistic == 'Mean')
thres <- filter(gg, Value_percDiff > 0.05)
##-----------------------------##
##Remove metrics that we dont want to include#####
##-----------------------------##
final <- filter(final, !Metric %in% c('Recovery rate'))
##------------------------------##
##Reorder by column name############
##------------------------------##
final <- final[c('Year','Sector','Metric','Statistic','N','Value','Variance','q25','q75','Order','tab','unit','ylab')]
##-----------------------------##
#----------Save data----------####
##---------------------------##
mini_whiting <- final
rownames(mini_whiting) <- NULL
saveRDS(mini_whiting, file = "mini_whiting.RDS")
.libPaths("/usr/lib64/R/shiny_library/fisheye")
#detach(unload = TRUE)
library(shiny)
library(shinyjs)
library(shinyBS)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
library(DT)
mini_whiting <- readRDS("mini_whiting.RDS")
# Data formatting for plot ####
data <- mini_whiting %>%
mutate(Variance = case_when(
unit == '' ~ Variance,
unit == 'thousands' ~ Variance/1e3,
unit == 'millions' ~ Variance/1e6,
unit == 'billions' ~ Variance/1e9,
T ~ -999),
q25 = case_when(
unit == '' ~ q25,
unit == 'thousands' ~ q25/1e3,
unit == 'millions' ~  q25/1e6,
unit == 'billions' ~  q25/1e9,
T ~ -999),
q75 = case_when(
unit == '' ~ q75,
unit == 'thousands' ~ q75/1e3,
unit == 'millions' ~  q75/1e6,
unit == 'billions' ~  q75/1e9,
T ~ -999),
Value = case_when(
unit == '' ~ Value,
unit == 'thousands' ~ Value/1e3,
unit == 'millions' ~ Value/1e6,
unit == 'billions' ~ Value/1e9,
T ~ -999),
upper = case_when(Statistic == 'Mean' ~ Value + Variance,
Statistic == 'Median' ~ q75,
Statistic == 'Total' ~ Value),
lower = case_when(Statistic == 'Mean' ~ Value - Variance,
Statistic == 'Median' ~ q25,
Statistic == 'Total' ~ Value)) %>%
data.frame()
# Data formatting for table#####
data_table <- mini_whiting %>%
mutate(Variance = round(Variance, 2),
q25 = round(q25,2),
q75 = round(q75,2),
Value = round(Value, 2)) %>%
data.frame()
# Filter by tab and metric for easy use in sidebar setup#####
prodTab <- filter(data, tab == 'Product')
prodTabval <- filter(prodTab, grepl('Production value', Metric))
prodTabwt <- filter(prodTab, grepl('Production weight', Metric))
prodTabprice <- filter(prodTab, grepl('Production price', Metric))
sumTab <- filter(data, tab == 'Summary')
sumTab$Metric <- sort(sumTab$Metric, decreasing = T)
tacTab <- filter(data, tab == 'TACU' & Statistic %in% c('Utilization by weight', 'Utilization by percent'))
tacTabval <- filter(tacTab, !grepl('percent', Metric))
tacTabperc <- filter(tacTab, grepl('percent', Metric))
unique(tacTab$Metric)
runApp()
