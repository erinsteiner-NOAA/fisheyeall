runApp()
options(shiny.error = browser)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
.libPaths()
.libPaths()
.libPaths("/usr/lib64/R/shiny_library/fisheye")
.libPaths()
runApp()
mini_whiting <- readRDS("mini_whiting.RDS")
runApp()
runApp()
runApp()
load("fisheyeall/PerformanceMetrics/data/CVperfmetrics.RData")
# (8) Pull in CP/MS impacts ######
# We are pulling the summarized final data for impacts so we don't need to do anything to it and can just bind to final whiting dataset
# set directory to pull in files from fisheyeapp
setwd('..')
load("fisheyeall/PerformanceMetrics/data/CVperfmetrics.RData")
##-----------------------------##
# Formatting of final dataset#####
##-----------------------------##
# All combinations
all_combos <- data_final %>%
select(Year, Sector, Statistic, Metric, N_total) %>%
reshape2::dcast(Year + Sector + Statistic ~ Metric, value.var = 'N_total', fill = 0) %>%
reshape2::melt(c('Year', 'Sector','Statistic')) %>%
mutate(Metric = variable,
N_total = value) %>%
select(-value, -variable)
# Sector confidentiality (if cp, ms or shoreside are suppressed then don't show all)
conf_proctype <- filter(data_final, Sector != 'All') %>%
select(Year, Sector, Metric, Statistic, Value) %>%
group_by(Year, Metric, Statistic) %>%
summarize(conf = sum(is.na(Value))) %>%
full_join(data_final) %>%
mutate(Value = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ Value),
Variance = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ Variance),
q25 = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ q25),
q75 = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ q75))
# Adding whiting/non-whiting confidentiality checks
data_final_0notincluded <- right_join(data_final, conf_proctype)
# Add in all combos so that when a field doesn't exist it is populated with zero
data_final_allcombosnew <- full_join(data_final_0notincluded, all_combos) %>%
# q25, q75, value, variance, N will be NA for the N = 0 added from all_combos. Add in here
# N is NA when value is suppressed.
mutate(Value = case_when(N_total == 0 ~ 0,
T ~ Value),
Variance = case_when(N_total == 0 ~ 0,
T ~ Variance),
q25 = case_when(N_total == 0 ~ 0,
T ~ q25),
q75 = case_when(N_total == 0 ~ 0,
T ~ q75),
N = case_when(N_total == 0 ~ '0',
is.na(Value) ~ 'NA',
T ~ as.character(N_total))) %>%
select(-conf, -N_total)
# Final formatting
data_final_format <- data_final_allcombosnew %>%
rbind(tac_final) %>%
mutate(Value = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Markup')
& Sector == 'Catcher-Processor' ~ NA_real_,
T ~ Value),
Order = case_when(grepl('Surimi', Metric) ~ 1,
grepl('Fishmeal', Metric) ~ 2,
grepl('Fillet', Metric) ~ 3,
grepl('Headed-and-gutted', Metric) ~ 4,
grepl('Frozen whole/Round', Metric) ~ 5,
grepl('Minced', Metric) ~ 6,
grepl('Fish oil', Metric) ~ 7,
grepl('Unprocessed', Metric) ~ 8,
grepl('Other', Metric) ~ 9),
tab = case_when(grepl('Percent by value', Metric) ~ 'Not in use',
grepl('Percent by weight', Metric) ~ 'Not in use',
grepl('Roe', Metric) ~ 'Not in use',
grepl('Surimi', Metric) ~ 'Product',
grepl('Fishmeal', Metric) ~ 'Product',
grepl('Fillet', Metric) ~ 'Product',
grepl('Headed-and-gutted', Metric) ~ 'Product',
grepl('Frozen whole/Round', Metric) ~ 'Product',
grepl('Minced', Metric) ~ 'Product',
grepl('Fish oil', Metric) ~ 'Product',
grepl('Unprocessed', Metric) ~ 'Product',
grepl('Other', Metric) ~ 'Product',
T ~ 'Summary')) %>%
group_by(Metric, Statistic) %>%
mutate(
unit = case_when(max(Value, na.rm = T) < 1e3 ~ '',
max(Value, na.rm = T) < 1e6 ~ 'thousands',
max(Value, na.rm = T) < 1e9 ~ 'millions',
max(Value, na.rm = T) < 1e12 ~ 'billions',
T ~ 'help'),
ylab = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Production value',
'Production price (per lb)', 'Markup') | grepl('Production value', Metric) |
grepl('Production price', Metric) ~
paste0(Metric, ": ", Statistic, " (", unit, " ", currentyear, " $)"),
Metric %in% c('Purchase (or catch) weight','Production weight') | grepl('Production weight', Metric) ~
paste0(Metric, ": ", Statistic, " (", unit, " lbs)"),
Metric == 'Recovery rate' | grepl('Percent', Metric) ~ Metric,
Metric == 'Total allowable catch, non-tribal' ~ paste0(Metric, ": Total (", unit, ")"),
T ~ paste0(Metric, " (", unit, ")"))) %>%
data.frame()
# if FR and vessels are on different years then need to make sure we don't show "all" for the most current year.
# Add impacts by rbind
final <- data_final_format %>%
mutate(rm = case_when(Sector == 'All' & Year > frcurrentyear & Metric != 'Total allowable catch, non-tribal' ~ 1,
T ~ 0)) %>%
filter(rm != 1) %>%
select(-rm) %>%
rbind(mscv_impacts) %>%
rbind(cp_impacts)
##-----------------------------##
# -------Compare function-----####
##-----------------------------##
mini_whiting <- readRDS("mini_whiting.RDS")
old <- mini_whiting %>%
select(-tab, -ylab) %>%
ungroup() %>%
mutate(Metric = case_when(Metric == 'Purchase cost' ~ 'Purchase value',
T ~ Metric),
N = as.numeric(N),
Year = as.numeric(Year))
new <- final %>%
select(-tab, -ylab) %>%
mutate(N = as.numeric(N),
Year = as.numeric(Year))
setnames(datold, 'variable', 'measure')
gg <- comparefun(old, new, c('N','Value','Variance', 'q25','q75'), 'wide')
# Check missing combos
gg2 <- filter(gg, combomiss == 'Missing combo', Metric != 'Recovery rate')
gg3 <- filter(gg, combomiss == 'Fine')
# units switched to millions because in 2018 shoreside had value of over million
gg2_ck <- filter(final, Metric == 'Other (Production value)' & Statistic == 'Mean')
thres <- filter(gg, Value_percDiff > 0.05)
##-----------------------------##
##Remove metrics that we dont want to include#####
##-----------------------------##
final <- filter(final, !Metric %in% c('Recovery rate'))
##------------------------------##
##Reorder by column name############
##------------------------------##
final <- final[c('Year','Sector','Metric','Statistic','N','Value','Variance','q25','q75','Order','tab','unit','ylab')]
##-----------------------------##
#----------Save data----------####
##---------------------------##
mini_whiting <- final
rownames(mini_whiting) <- NULL
saveRDS(mini_whiting, file = "mini_whiting.RDS")
shiny::runApp()
source("~/REPOS/fisheyeall/whiting/dataprep.R", echo=TRUE)
# (8) Pull in CP/MS impacts ######
# We are pulling the summarized final data for impacts so we don't need to do anything to it and can just bind to final whiting dataset
# set directory to pull in files from fisheyeapp
setwd('..')
load("fisheyeall/PerformanceMetrics/data/CVperfmetrics.RData")
load("fisheyeall/PerformanceMetrics/data/Mperfmetrics.RData")
load("fisheyeall/PerformanceMetrics/data/CPperfmetrics.RData")
#load("PerformanceMetrics/data/FRperfmetrics.RData")
# set directory back to fisheyewhiting
setwd('fisheyeall/whiting')
ms_impacts <- filter(Mperfmetrics, tab == 'Impacts') %>%
dplyr::select(-c(inclAK,CS,CATEGORY,AGID,VARIABLE,metric_flag,conf,flag,tab,lower,upper,whitingv)) %>%
rename(Year = YEAR,
Metric = METRIC,
Statistic = STAT,
Value = VALUE,
Variance = VARIANCE) %>%
mutate(Sector = 'Mothership',
tab = 'Summary',
Order = NA_real_
)
# Pull impacts for at-sea vessels
atsea_impacts <- filter(CVperfmetrics, METRIC %in% c('Employment impacts', 'Income impacts'), CATEGORY == 'Fisheries', VARIABLE == 'At-sea Pacific whiting', whitingv == 'All vessels') %>%
dplyr::select(-c(inclAK,CS,CATEGORY,AGID,VARIABLE,metric_flag,conf,flag,lower,upper,whitingv)) %>%
rename(Year = YEAR,
Metric = METRIC,
Statistic = STAT,
Value_atsea = VALUE,
Variance = VARIANCE,
N_atsea = N) %>%
mutate(Sector = 'Mothership',
tab = 'Summary',
Order = NA_real_
)
# combine at sea vessel and mothership
mscv_impacts <- full_join(ms_impacts, atsea_impacts) %>%
mutate(Value = Value + Value_atsea,
N = N + N_atsea,
Year = as.numeric(Year)) %>%
dplyr::select(-N_atsea, -Value_atsea, -origN)
# cp impacts
cp_impacts <- filter(CPperfmetrics, tab == 'Impacts') %>%
dplyr::select(-c(inclAK,CS,CATEGORY,AGID,VARIABLE,metric_flag,conf,flag,tab,lower,upper,whitingv)) %>%
rename(Year = YEAR,
Metric = METRIC,
Statistic = STAT,
Value = VALUE,
Variance = VARIANCE) %>%
mutate(Sector = 'Catcher-Processor',
tab = 'Summary',
Order = NA_real_,
Year = as.numeric(Year)
)
##Calculating rates####
rates_raw <- data_combined %>%
mutate(PRODUCT = case_when(METRIC %in% c('Purchase value','Purchase (or catch) weight') ~ 'All products',
T ~ PRODUCT)) %>%
reshape2::dcast(VESSEL_ID + COMPANY + YEAR + SECTOR + PRODUCT ~ METRIC, value.var = 'VALUE') %>%
mutate(`Purchase price (per lb)` = case_when(!is.na(`Purchase value`) & !is.na(`Purchase (or catch) weight`)
& PRODUCT == 'All products' ~ `Purchase value`/`Purchase (or catch) weight`,
T ~ NA_real_),
`Production price (per lb)` = case_when(!is.na(`Production value`) & !is.na(`Production weight`) ~ `Production value`/`Production weight`,
T ~ NA_real_),
Markup = case_when(PRODUCT == 'All products' & !is.na(`Purchase value`) & !is.na(`Production value`) ~ `Production value`/`Purchase value`,
T ~ NA_real_),
`Recovery rate` = case_when(PRODUCT == 'All products' & !is.na(`Purchase (or catch) weight`) & !is.na(`Production weight`) ~ `Production weight`/`Purchase (or catch) weight`,
T ~ NA_real_)) %>%
reshape2::melt(id.vars = c('VESSEL_ID','COMPANY','YEAR','SECTOR','PRODUCT')) %>%
filter(!is.na(value) & variable %in% c('Purchase price (per lb)','Production price (per lb)','Markup', 'Recovery rate')) %>%
mutate(METRIC = variable,
VALUE = value) %>%
select(-variable, -value)
# Calculating percent of total production weight/value by product type
perc <- filter(data_combined, PRODUCT == 'All products') %>%
reshape2::dcast(YEAR + SECTOR + COMPANY + VESSEL_ID ~ METRIC, value.var = 'VALUE') %>%
rename(`Total weight` = `Production weight`,
`Total value` = `Production value`) %>%
merge(data_combined %>%
filter(PRODUCT != 'All products' & !is.na(PRODUCT)) %>%
reshape2::dcast(YEAR + SECTOR + COMPANY + VESSEL_ID + PRODUCT ~ METRIC, value.var = 'VALUE')) %>%
mutate(`Percent by value` = (`Production value`/`Total value`)*100,
`Percent by weight` = (`Production weight`/`Total weight`)*100) %>%
select(-`Total value`,-`Total weight`,-`Production value`,-`Production weight`) %>%
reshape2::melt(id.vars = c('YEAR','SECTOR','COMPANY','VESSEL_ID','PRODUCT')) %>%
rename(METRIC = variable,
VALUE = value)
data_rates_full <- rbind(data_combined, rates_raw, perc)
# Confidentiality treatment ###########
data_rates_full_treated <- confTreat(data_rates_full, variables = c('YEAR','METRIC','PRODUCT','SECTOR'), valvar = 'VALUE',
confunit = 'COMPANY', drop = F)
# Summarizing data#####
# Mean, median, total
data_all_smry <- data_rates_full_treated %>%
group_by(YEAR, SECTOR, PRODUCT, METRIC) %>%
summarize(Mean = mean(VALUE, na.rm = T),
Median = median(VALUE, na.rm = T),
Total = sumNA(VALUE, na.rm = T),
VARIANCE = sd(VALUE, na.rm = T),
q25 = quantile(VALUE, prob =.25, type = 8, na.rm = T),
q75 = quantile(VALUE, prob =.75, type = 8, na.rm = T),
# show N for the total number (regardless of whether NA or not)
N_total = length(unique(VESSEL_ID)),
N = sum(is.na(VALUE))) %>%
data.frame() %>%
reshape2::melt(id.vars = c('YEAR','SECTOR','PRODUCT','METRIC', 'VARIANCE', 'q25','q75','N', 'N_total')) %>%
mutate(STATISTIC = as.character(variable),
VALUE = value,
rm = case_when(METRIC %in% c('Purchase price (per lb)','Production price (per lb)','Markup','Recovery rate',
'Percent by value','Percent by weight') & STATISTIC == 'Total' ~ 1,
T ~ 0)) %>%
filter(rm != 1) %>%
select(-variable,-value, -rm)
# Total for rates
rates_tot <- data_rates_full_treated %>%
mutate(PRODUCT = case_when(METRIC %in% c('Purchase value','Purchase (or catch) weight') ~ 'All products',
T ~ PRODUCT)) %>%
reshape2::dcast(COMPANY + YEAR + SECTOR + PRODUCT ~ METRIC, value.var = 'VALUE', fun.aggregate = sum) %>%
group_by(YEAR, SECTOR, PRODUCT) %>%
summarize(`Purchase price (per lb)` =  sumNA(`Purchase value`, na.rm = T)/sumNA(`Purchase (or catch) weight`, na.rm = T),
`Production price (per lb)` = sumNA(`Production value`, na.rm = T)/sumNA(`Production weight`, na.rm = T),
Markup = sumNA(`Production value`, na.rm = T)/sumNA(`Purchase value`, na.rm = T),
`Recovery rate` = sumNA(`Production weight`, na.rm = T)/sumNA(`Purchase (or catch) weight`, na.rm = T)) %>%
reshape2::melt(id.vars = c('YEAR','SECTOR','PRODUCT')) %>%
mutate(rm = case_when((SECTOR == 'Catcher-Processor' & variable %in% c('Purchase price (per lb)', 'Markup'))
| (PRODUCT != 'All products' & variable %in% c('Purchase price (per lb)', 'Markup', 'Recovery rate')) ~ 1,
T ~ 0),
METRIC = variable,
VALUE = value) %>%
filter(rm != 1) %>%
select(-rm, -variable, - value)
perc_tot <- filter(data_rates_full_treated, PRODUCT == 'All products') %>%
reshape2::dcast(YEAR + SECTOR + COMPANY + VESSEL_ID ~ METRIC, value.var = 'VALUE') %>%
rename(`Total weight` = `Production weight`,
`Total value` = `Production value`) %>%
select(YEAR, SECTOR, COMPANY, VESSEL_ID, `Total value`,`Total weight`) %>%
merge(data_rates_full_treated %>%
filter(PRODUCT != 'All products' & !is.na(PRODUCT)) %>%
reshape2::dcast(YEAR + SECTOR + COMPANY + VESSEL_ID + PRODUCT ~ METRIC, value.var = 'VALUE') %>%
select(YEAR, SECTOR, COMPANY, VESSEL_ID, PRODUCT, `Production value`,`Production weight`)) %>%
group_by(YEAR, SECTOR, PRODUCT) %>%
summarize(`Percent by value` = (sumNA(`Production value`, na.rm = T)/sumNA(`Total value`, na.rm = T))*100,
`Percent by weight` = (sumNA(`Production weight`, na.rm = T)/sumNA(`Total weight`, na.rm = T))*100) %>%
reshape2::melt(id.vars = c('YEAR','SECTOR','PRODUCT')) %>%
rename(METRIC = variable,
VALUE = value)
rates_tot_full <- rbind(rates_tot, perc_tot) %>%
mutate(STATISTIC = 'Total',
VARIANCE = NA_real_,
q25 = NA_real_,
q75 = NA_real_) %>%
merge(data_all_smry %>%
select(-VARIANCE, -q25, -q75, -STATISTIC, -VALUE) %>%
distinct())
# Final summarized dataset####
data_final <- rbind(data_all_smry, rates_tot_full) %>%
mutate(
Metric = as.character(case_when(!is.na(PRODUCT) & PRODUCT != 'All products' ~ paste0(PRODUCT, " (", METRIC, ")"),
T ~ METRIC)),
Year = YEAR,
Sector = as.character(SECTOR),
Statistic = as.character(STATISTIC),
Value = VALUE,
Variance = VARIANCE) %>%
select(-c(PRODUCT, YEAR, SECTOR, METRIC, STATISTIC, VALUE, VARIANCE)) %>%
as.data.frame()
##-----------------------------##
# Formatting of final dataset#####
##-----------------------------##
# All combinations
all_combos <- data_final %>%
select(Year, Sector, Statistic, Metric, N_total) %>%
reshape2::dcast(Year + Sector + Statistic ~ Metric, value.var = 'N_total', fill = 0) %>%
reshape2::melt(c('Year', 'Sector','Statistic')) %>%
mutate(Metric = variable,
N_total = value) %>%
select(-value, -variable)
# Sector confidentiality (if cp, ms or shoreside are suppressed then don't show all)
conf_proctype <- filter(data_final, Sector != 'All') %>%
select(Year, Sector, Metric, Statistic, Value) %>%
group_by(Year, Metric, Statistic) %>%
summarize(conf = sum(is.na(Value))) %>%
full_join(data_final) %>%
mutate(Value = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ Value),
Variance = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ Variance),
q25 = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ q25),
q75 = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ q75))
# Adding whiting/non-whiting confidentiality checks
data_final_0notincluded <- right_join(data_final, conf_proctype)
# Add in all combos so that when a field doesn't exist it is populated with zero
data_final_allcombosnew <- full_join(data_final_0notincluded, all_combos) %>%
# q25, q75, value, variance, N will be NA for the N = 0 added from all_combos. Add in here
# N is NA when value is suppressed.
mutate(Value = case_when(N_total == 0 ~ 0,
T ~ Value),
Variance = case_when(N_total == 0 ~ 0,
T ~ Variance),
q25 = case_when(N_total == 0 ~ 0,
T ~ q25),
q75 = case_when(N_total == 0 ~ 0,
T ~ q75),
N = case_when(N_total == 0 ~ '0',
is.na(Value) ~ 'NA',
T ~ as.character(N_total))) %>%
select(-conf, -N_total)
# Final formatting
data_final_format <- data_final_allcombosnew %>%
rbind(tac_final) %>%
mutate(Value = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Markup')
& Sector == 'Catcher-Processor' ~ NA_real_,
T ~ Value),
Order = case_when(grepl('Surimi', Metric) ~ 1,
grepl('Fishmeal', Metric) ~ 2,
grepl('Fillet', Metric) ~ 3,
grepl('Headed-and-gutted', Metric) ~ 4,
grepl('Frozen whole/Round', Metric) ~ 5,
grepl('Minced', Metric) ~ 6,
grepl('Fish oil', Metric) ~ 7,
grepl('Unprocessed', Metric) ~ 8,
grepl('Other', Metric) ~ 9),
tab = case_when(grepl('Percent by value', Metric) ~ 'Not in use',
grepl('Percent by weight', Metric) ~ 'Not in use',
grepl('Roe', Metric) ~ 'Not in use',
grepl('Surimi', Metric) ~ 'Product',
grepl('Fishmeal', Metric) ~ 'Product',
grepl('Fillet', Metric) ~ 'Product',
grepl('Headed-and-gutted', Metric) ~ 'Product',
grepl('Frozen whole/Round', Metric) ~ 'Product',
grepl('Minced', Metric) ~ 'Product',
grepl('Fish oil', Metric) ~ 'Product',
grepl('Unprocessed', Metric) ~ 'Product',
grepl('Other', Metric) ~ 'Product',
T ~ 'Summary')) %>%
group_by(Metric, Statistic) %>%
mutate(
unit = case_when(max(Value, na.rm = T) < 1e3 ~ '',
max(Value, na.rm = T) < 1e6 ~ 'thousands',
max(Value, na.rm = T) < 1e9 ~ 'millions',
max(Value, na.rm = T) < 1e12 ~ 'billions',
T ~ 'help'),
ylab = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Production value',
'Production price (per lb)', 'Markup') | grepl('Production value', Metric) |
grepl('Production price', Metric) ~
paste0(Metric, ": ", Statistic, " (", unit, " ", currentyear, " $)"),
Metric %in% c('Purchase (or catch) weight','Production weight') | grepl('Production weight', Metric) ~
paste0(Metric, ": ", Statistic, " (", unit, " lbs)"),
Metric == 'Recovery rate' | grepl('Percent', Metric) ~ Metric,
Metric == 'Total allowable catch, non-tribal' ~ paste0(Metric, ": Total (", unit, ")"),
T ~ paste0(Metric, " (", unit, ")"))) %>%
data.frame()
# if FR and vessels are on different years then need to make sure we don't show "all" for the most current year.
# Add impacts by rbind
final <- data_final_format %>%
mutate(rm = case_when(Sector == 'All' & Year > frcurrentyear & Metric != 'Total allowable catch, non-tribal' ~ 1,
T ~ 0)) %>%
filter(rm != 1) %>%
select(-rm) %>%
rbind(mscv_impacts) %>%
rbind(cp_impacts)
##-----------------------------##
# -------Compare function-----####
##-----------------------------##
mini_whiting <- readRDS("mini_whiting.RDS")
old <- mini_whiting %>%
select(-tab, -ylab) %>%
ungroup() %>%
mutate(Metric = case_when(Metric == 'Purchase cost' ~ 'Purchase value',
T ~ Metric),
N = as.numeric(N),
Year = as.numeric(Year))
new <- final %>%
select(-tab, -ylab) %>%
mutate(N = as.numeric(N),
Year = as.numeric(Year))
gg <- comparefun(old, new, c('N','Value','Variance', 'q25','q75'), 'wide')
# Check missing combos
gg2 <- filter(gg, combomiss == 'Missing combo', Metric != 'Recovery rate')
gg3 <- filter(gg, combomiss == 'Fine')
# units switched to millions because in 2018 shoreside had value of over million
gg2_ck <- filter(final, Metric == 'Other (Production value)' & Statistic == 'Mean')
thres <- filter(gg, Value_percDiff > 0.05)
##-----------------------------##
##Remove metrics that we dont want to include#####
##-----------------------------##
final <- filter(final, !Metric %in% c('Recovery rate'))
##------------------------------##
##Reorder by column name############
##------------------------------##
final <- final[c('Year','Sector','Metric','Statistic','N','Value','Variance','q25','q75','Order','tab','unit','ylab')]
##-----------------------------##
#----------Save data----------####
##---------------------------##
mini_whiting <- final
rownames(mini_whiting) <- NULL
saveRDS(mini_whiting, file = "mini_whiting.RDS")
shiny::runApp()
>>>>>>> origin/main
