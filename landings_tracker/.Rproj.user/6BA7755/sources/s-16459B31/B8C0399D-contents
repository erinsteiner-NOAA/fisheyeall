# This script pulls data and formats the dataframe for use in the app #
library(dplyr)
library(reshape2)
library(lubridate)
library(EDCReport)
library(tidyr)
#devtools::install_github("sboysel/fredr")
library(fredr)

source("confTreat.R")
source("helperfns.R")

# pull in the date stamp from the datapull file
datpull_date <- readRDS('datpull_date.RDS')

# pull in data from datapull.R
comp_dat_raw_load <- readRDS('comp_dat_raw.RDS')

# Data Load requirements based off of data pull date.#############
# We do not want to include data from a week that has not completed or a month that is not over
# We include a 3 day lag here
# datpull_date is generated by the datapull.R file
# Week must be less than 'week_datpull_date'
week_datpull_date <- as.numeric(format((datpull_date-3), "%V"))
# Month must be less than 'month_datpull_date'
month_datpull_date <- month(datpull_date-3)

# Set completeness cutoff at 14 days prior to datpull date ###############
# All data after this date will be shown with uncertainty
# For Washington apply 28 day cutoff.
completeness_cutoff <- datpull_date - 14
month_cutoff <- month(completeness_cutoff) - 1
# cutoffs for washington
wk4_completeness <- datpull_date - 28
wk4_month <- month(wk4_completeness) - 1

# Deflator #####
fredr_set_key('a5d92deb507a05eb5a7f84355a02f602')
fred_gdpdefl <- fredr(
  series_id = "GDPDEF",
  observation_start = as.Date("2015-01-01")
) 

defl_adj <- mutate(fred_gdpdefl, LANDING_YEAR = format(date,"%Y")) %>%
  group_by(LANDING_YEAR) %>%
  summarise(defl = mean(value)) %>%
  mutate(DEFL = defl/defl[LANDING_YEAR == 2020]) %>%
  select(-defl)

# species groups changes #####
wa_othr <- c('OTHER CRAB', 'ANCHOVY', 'SARDINE', 'OTHER COASTAL PELAGIC')

# Load data from data_pull.R ####
comp_dat_raw1 <- comp_dat_raw_load %>%
  rename(YEAR = LANDING_YEAR) %>%
  select(-TICKET_SOURCE_CODE) %>%
  subset(!(AGENCY_CODE == 'C' & SPECIES_GROUP == 'WHITING')) %>%
  # remove shellfish
  subset(SPECIES_GROUP != 'SHELLFISH') %>%
  # move wa/or cps into other species
  # adjust whiting to zero is prior to May 15
  mutate(SPECIES_GROUP = case_when(
    AGENCY_CODE %in% c('W', 'O') & SPECIES_GROUP %in% wa_othr ~ 'OTHER',
                                   T ~ SPECIES_GROUP)) %>%
  filter(YEAR > 2014)

# Create an "all non-whiting groundfish" category
grndfsh_list <- c('NEARSHORE GROUNDFISH',
                  'OFFSHORE GROUNDFISH',
                  'NON-WHITING GROUNDFISH NON-IFQ',
                  'NON-WHITING GROUNDFISH IFQ',
                  'MIDWATER')

comp_dat_raw <- comp_dat_raw1 %>%
  rbind(filter(comp_dat_raw1, SPECIES_GROUP %in% grndfsh_list) %>%
          mutate(SPECIES_GROUP = 'ALL NON-WHITING') %>%
          group_by(YEAR, LANDING_MONTH, LANDING_DATE, AGENCY_CODE, VESSEL_NUM, DEALER_NUM, SPECIES_GROUP) %>%
          summarize(ROUND_WEIGHT_MTONS = sum(ROUND_WEIGHT_MTONS),
                    EXVESSEL_REVENUE = sum(EXVESSEL_REVENUE)) %>%
          data.frame())

# Remove outliers
comp_dat_outadj <- comp_dat_raw %>%
  mutate(price = EXVESSEL_REVENUE/(ROUND_WEIGHT_MTONS*2204.62)) %>%
  filter(price < 150) %>%
  select(-price)

# Data formatting ####
# Adding date variables to use in data summaries
comp_dat_fmt <- comp_dat_outadj %>%
  mutate(WEEKOFYEAR = as.numeric(format(LANDING_DATE, "%V")),
         DAYOFYEAR = as.numeric(format(LANDING_DATE, "%j"))) 

comp_dat_sub <- comp_dat_fmt %>%
  select( -LANDING_DATE, -DAYOFYEAR) %>%
  reshape2::melt(c('VESSEL_NUM','DEALER_NUM','SPECIES_GROUP','YEAR','WEEKOFYEAR', 'LANDING_MONTH', 'AGENCY_CODE')) %>%
  rename(Metric = variable,
         Value = value) %>%
  # Deflator is being used here #
  merge(defl_adj) %>%
  mutate(Value = case_when(Metric == 'EXVESSEL_REVENUE' ~ Value/DEFL,
                           T ~ Value)) %>%
  select(-DEFL)

# Add agency_code = 'All' option for no state grouping
comp_dat_all <- comp_dat_sub %>%
  mutate(AGENCY_CODE = 'All') %>%
  rbind(comp_dat_sub) %>%
  # summarizing by month
  group_by(YEAR, VESSEL_NUM, DEALER_NUM, SPECIES_GROUP, LANDING_MONTH, AGENCY_CODE, Metric) %>%
  summarize(Value = sum(Value)) %>%
  mutate(CONF = 'NOT_TREATED') %>%
  data.frame()

saveRDS(comp_dat_all, "comp_dat_all.RDS")

# Add in weekly data 
# Filter out data from weeks/month that are still in progress
comp_dat_all_wk <- comp_dat_sub %>%
  mutate(AGENCY_CODE = 'All') %>%
  rbind(comp_dat_sub) %>%
  # Summarizing by week
  group_by(YEAR, VESSEL_NUM, DEALER_NUM, SPECIES_GROUP, WEEKOFYEAR, AGENCY_CODE, Metric) %>%
  summarize(Value = sum(Value)) %>%
  mutate(CONF = 'NOT_TREATED',
         Interval = 'Weekly',
         rm = case_when(YEAR == 2020 & WEEKOFYEAR >= week_datpull_date ~ 1,
                        T ~ 0)) %>%
  rename(LANDING_MONTH = WEEKOFYEAR) %>%
  data.frame() %>%
  filter(rm != 1) %>%
  select(-rm) %>%
  rbind(comp_dat_all %>%
          mutate(Interval = 'Monthly',
                 rm = case_when(YEAR == 2020 & LANDING_MONTH >= month_datpull_date ~ 1,
                                T ~ 0)) %>%
          filter(rm != 1) %>%
          select(-rm))

# run the confidentiality checks and suppress fields as necessary in the raw data
# from Marie: using this instead of PreTreat 
confidentiality <- confTreat(comp_dat_all_wk, c('YEAR','SPECIES_GROUP','LANDING_MONTH','AGENCY_CODE','Metric', 'Interval'),
           valvar = 'Value', confunit = c('VESSEL_NUM','DEALER_NUM'), whichtables = 'both')

# save the treated data from confidentiality check
comp_dat_all_mtreated <- mutate(confidentiality$data, CONF = 'TREATED')

# dataframe with both the treated and untreated data
# Calculate price metric here
comp_dat_full <- rbind(comp_dat_all_wk, comp_dat_all_mtreated) %>%
  reshape2::dcast(YEAR + VESSEL_NUM + DEALER_NUM + SPECIES_GROUP + LANDING_MONTH + AGENCY_CODE + CONF + Interval ~ Metric,
        value.var = "Value") %>%
  mutate(price = EXVESSEL_REVENUE/(ROUND_WEIGHT_MTONS*2204.62)) %>%
  reshape2::melt(id.vars = c('YEAR','VESSEL_NUM','DEALER_NUM','SPECIES_GROUP','LANDING_MONTH','AGENCY_CODE','CONF','Interval')) %>%
  rename(Metric = variable,
         Value = value)

# Data analysis ####
# Calculating mean rev/mt by species group, agency_code, and month
comp_dat_dt <- data.table(comp_dat_full)
comp_dat_dt <- comp_dat_dt[!is.na(VESSEL_NUM)]
comp_dat_dt <- comp_dat_dt[, .(Value=sum(Value)), by=list(VESSEL_NUM, SPECIES_GROUP, AGENCY_CODE, YEAR, LANDING_MONTH, Metric, CONF, Interval)]
comp_dat_avg <- comp_dat_dt[, .(Mean = mean(Value), 
                                Median = median(Value), 
                                Variance = sd(Value), 
                                q25 = quantile(Value, prob =.25, type = 8, na.rm = T),
                                q75 = quantile(Value, prob =.75, type = 8, na.rm = T),
                                N_vss = length(unique(VESSEL_NUM))), 
  by=.(SPECIES_GROUP, AGENCY_CODE, YEAR, LANDING_MONTH, Metric, CONF, Interval)] %>%
  reshape2::melt(c('SPECIES_GROUP','AGENCY_CODE', 'YEAR', 'LANDING_MONTH', 'Metric','Variance','q25','q75', 'CONF', 'N_vss', 'Interval')) %>%
  rename(Statistic = variable,
         Value = value) %>%
  data.frame()

# Calculating the total rev/mt by species group, agency_code, and month  
comp_dat_tot_revlbs <- filter(comp_dat_full, Metric != 'price') %>%
  group_by(SPECIES_GROUP, AGENCY_CODE, YEAR, LANDING_MONTH, Metric, CONF, Interval) %>%
  summarize(Value = sum(Value),
            N_vss = length(unique(VESSEL_NUM)),
            N_buy = length(unique(DEALER_NUM)))

comp_dat_tot_price <- comp_dat_full %>%
  reshape2::dcast(YEAR + VESSEL_NUM + DEALER_NUM + SPECIES_GROUP + LANDING_MONTH + 
          AGENCY_CODE + CONF + Interval ~ Metric, value.var = 'Value') %>%
  group_by(SPECIES_GROUP, AGENCY_CODE, YEAR, LANDING_MONTH, CONF, Interval) %>%
  summarize(EXVESSEL_REVENUE = sum(EXVESSEL_REVENUE),
            ROUND_WEIGHT_MTONS = sum(ROUND_WEIGHT_MTONS),
            Value = EXVESSEL_REVENUE/(ROUND_WEIGHT_MTONS*2204.62),
            N_vss = length(unique(VESSEL_NUM)),
            N_buy = length(unique(DEALER_NUM))) %>%
  select(-EXVESSEL_REVENUE,-ROUND_WEIGHT_MTONS) %>%
  mutate(Metric = 'price')

  
comp_dat_tot <- rbind(data.frame(comp_dat_tot_revlbs), data.frame(comp_dat_tot_price)) %>%
  mutate(Statistic = 'Total',
         q25 = NA_real_,
         q75 = NA_real_,
         Variance = NA_real_)

#Treat as confidential or not? 
# Number of vessels and dealers by species group, agency code, and month
comp_dat_n <- filter(comp_dat_full, !is.na(VESSEL_NUM) & !is.na(DEALER_NUM) & CONF == 'NOT_TREATED') %>%
  group_by(SPECIES_GROUP, AGENCY_CODE, YEAR, LANDING_MONTH, CONF, Interval) %>%
  summarize(`Number of vessels` = length(unique(VESSEL_NUM)),
            `Number of buyers` = length(unique(DEALER_NUM))) %>%
  reshape2::melt(c('SPECIES_GROUP','AGENCY_CODE', 'YEAR', 'LANDING_MONTH', 'CONF','Interval')) %>%
  rename(Metric = variable,
         Value = value) %>%
  mutate(Statistic = 'Total',
         q25 = NA_real_,
         q75 = NA_real_,
         Variance = NA_real_,
         N_vss = case_when(Metric == 'Number of vessels' ~ Value,
                           T ~ NA_integer_),
         N_buy = case_when(Metric == 'Number of buyers' ~ Value,
                           T ~ NA_integer_)) %>%
  data.frame()

# Add # of buyers onto comp_dat_avg
comp_dat_avg_buy <- filter(comp_dat_n, Metric == 'Number of buyers') %>%
  select(-Metric, -Value, -Statistic, -q25, -q75, -Variance, -N_vss, -CONF) %>%
  merge(comp_dat_avg)

# Bind together data frames
comp_dat_final <- rbind(comp_dat_avg_buy, comp_dat_tot, comp_dat_n) %>%
  rename(State = AGENCY_CODE,
         Species = SPECIES_GROUP,
         Year = YEAR) %>% 
  data.frame()

# Baseline (5 yr median) calculated using the untreated data ####
# This used to be the 35% percent cutoff, but is now the 5 year median
# We need to remove 2015/2016 disaster years from the calculation of 35% for crab
cut35_crab <- filter(comp_dat_final, !Year %in% c(2015, 2016, 2020) & CONF == 'NOT_TREATED' 
                     & grepl('CRAB', Species)) %>%
  group_by(Species, State, LANDING_MONTH, Metric, Statistic, Interval) %>%
  summarise(Value = median(Value),
            N_vss = sum(N_vss),
            N_buy = sum(N_buy)) %>%
  mutate(Year = 'Baseline') %>%
  data.frame()

cut35 <- subset(comp_dat_final, Year != 2020 & CONF == 'NOT_TREATED' 
                & !grepl('CRAB', Species) & Species != 'SARDINE') %>%
  group_by(Species, State, LANDING_MONTH, Metric, Statistic, Interval) %>%
  summarise(Value = median(Value),
            N_vss = sum(N_vss),
            N_buy = sum(N_buy)) %>%
  mutate(Year = 'Baseline') %>%
  data.frame()

cut35_dat <- rbind(cut35, cut35_crab) %>%
  mutate(Value = case_when(!Metric %in% c('Number of vessels','Number of buyers') &
                             # Suppress when vessel or buyer 1 or 2.
                             ((N_vss < 3 & N_vss != 0) | (N_buy < 3 & N_buy != 0)) ~ NA_real_,
                           T ~ Value),
         CONF = 'TREATED') %>%
  # Add not treated to be used with cumsum; can't have NAs when calculating cumsum
 rbind(rbind(cut35, cut35_crab) %>%
         mutate(CONF = 'NOT_TREATED')) %>%
  mutate(q25 = NA_real_,
         q75 = NA_real_,
         Variance = NA_real_)

# all data including baseline calculations and 2020 percent change
comp_dat_final_cut <- rbind(comp_dat_final, cut35_dat) %>%
  mutate(Cumulative = 'N')


# Calculating cumulative totals ##### 
conftable <- rename(confidentiality$flag,
  State = AGENCY_CODE,
  Species = SPECIES_GROUP,
  Year = YEAR) %>%
  mutate(Year = as.character(Year))

comp_dat_final_cumul <- subset(comp_dat_final_cut, Statistic == 'Total' 
                               & Metric %in% c('ROUND_WEIGHT_MTONS', 'EXVESSEL_REVENUE') 
                               & CONF == 'NOT_TREATED') %>%
  group_by(Species, State, Year, Metric, Statistic, Interval) %>%
  mutate(Value = cumsum(Value),
    Cumulative = 'Y') %>%
  # join on the confidentiality table and suppress as needed
  merge(conftable, all.x = T) %>%
  mutate(Value = case_when(final == 'ok' ~ Value, 
                           # Include suppression for baseline here. Baseline is not included in the conftable
                           !Metric %in% c('Number of vessels','Number of buyers') & Year == 'Baseline' &
                                               # Suppress when vessel or buyer 1 or 2.
                                               ((N_vss < 3 & N_vss != 0) | (N_buy < 3 & N_buy != 0)) ~ NA_real_,
                           is.na(final) ~ Value,
                           T ~ NA_real_),
         CONF = 'TREATED') %>%
  select(-final) %>%
  data.frame() %>%
  rbind(comp_dat_final_cut) %>%
  mutate(rm_conf = case_when(Cumulative == 'Y' ~ 0,
                             Year == 'Baseline' ~ 0,
                             Metric %in% c('Number of vessels', 'Number of buyers') ~ 0,
                             CONF == 'NOT_TREATED' ~ 1,
                             T ~ 0)) %>%
  filter(rm_conf != 1) %>%
  select(-rm_conf,-CONF)

# Adding 0 for combos where there is no data #####
all_combos <- comp_dat_final_cumul %>%
  select(Year, State, LANDING_MONTH, Statistic, Metric, Cumulative, Interval) %>%
  expand(Year, State, LANDING_MONTH, Statistic, Metric, Cumulative, Interval) %>%
  merge((comp_dat_final_cumul %>%
           select(Species) %>%
           distinct()), all = T) %>%
  #group_by(Year, State, LANDING_MONTH, Statistic, Metric, Cumulative, Type, Interval, Species) %>%
  #distinct() %>%
  mutate(rm = case_when(Interval == 'Monthly' & (LANDING_MONTH > 12 | LANDING_MONTH < 1) ~ 1,
                        Interval == 'Monthly' & LANDING_MONTH >= month_datpull_date 
                        & Year == 2020 ~ 1,
                        Interval == 'Weekly' & LANDING_MONTH >= week_datpull_date & Year == 2020 ~ 1,
                        # only calculate cumulative for rev/mt and for total; remove others
                        Cumulative == 'Y' & Statistic != 'Total' & !Metric %in% c('ROUND_WEIGHT_MTONS', 'EXVESSEL_REVENUE') ~ 1,
                        T ~ 0)) %>%
  filter(rm != 1) %>%
  select(-rm) 
    
# List of fisheries that are either non-existent or have such small landings that
# it is not interpretable
rmfisheries_CA <- c('NON-WHITING GROUNDFISH NON-IFQ',
                    'MIDWATER',
                    'PUGET SOUND FISHERIES',
                    'CATCHER PROCESSOR',
                    'MOTHERSHIP',
                    'WHITING')

rmfisheries_WA <- c('NON-WHITING GROUNDFISH IFQ',
                    'ANCHOVY',
                    'MARKET SQUID',
                    'NEARSHORE GROUNDFISH',
                    'NON-WHITING GROUNDFISH NON-IFQ',
                    'OTHER COASTAL PELAGIC',
                    'OTHER CRAB',
                    'SARDINE',
                    'CATCHER PROCESSOR',
                    'MOTHERSHIP')

rmfisheries_OR <- c('NON-WHITING GROUNDFISH NON-IFQ',
                    'ANCHOVY',
                    'OTHER COASTAL PELAGIC',
                    'OTHER CRAB',
                    'PUGET SOUND FISHERIES',
                    'SARDINE',
                    'CATCHER PROCESSOR',
                    'MOTHERSHIP')

# Add in 0s for clarity between suppressed v. no data. Without this step combinations with 0 don't show up at all. 
comp_dat_final_cumul_0s <- merge(all_combos, comp_dat_final_cumul, all.x = T) %>%
  # Remove fisheries
  mutate(rmfish = case_when(Species %in% rmfisheries_CA & State == 'C' ~ 1,
                            Species %in% rmfisheries_OR & State == 'O' ~ 1,
                            Species %in% rmfisheries_WA & State == 'W' ~ 1,
                            # Remove fixed gear-other for all states
                            Species == 'NON-WHITING GROUNDFISH NON-IFQ' & State == 'All' ~ 1,
                            !Species %in% c('CATCHER PROCESSOR',
                                           'MOTHERSHIP',
                                           'WHITING') & State == 'F' ~ 1,
                            T ~ 0)) %>%
  filter(rmfish != 1) %>%
  select(-rmfish) %>%
  data.frame()

# Calculating different filters###############
# 1) 2020 change. Compares 2020 value to the baseline ######
# baseline comparison
cutoff_2020 <- subset(comp_dat_final, Year == 2020) %>%
  group_by(State) %>%
  summarize(LANDING_MONTH = max(LANDING_MONTH)) %>%
  # only use complete data
  mutate(LANDING_MONTH = case_when(State %in% c('All','W') ~ week(wk4_completeness),
                                   T ~ week(completeness_cutoff))) 

only_2020 <- filter(comp_dat_final, 
                    # pull the untreated values
                    CONF == 'NOT_TREATED' &
                      Metric == 'EXVESSEL_REVENUE' & 
                      Statistic == 'Total' &
                      Year == '2020' &
                      Interval == 'Weekly') %>%
  group_by(Species, State) %>%
  mutate(cumREV_2020 = cumsum(Value)) %>%
  # only use complete data
  filter((State %in% c('All','W') & LANDING_MONTH <= week(wk4_completeness)) |
           (State %in% c('C', 'O', 'F') & LANDING_MONTH <= week(completeness_cutoff))) %>%
  select(Species, State, cumREV_2020)  %>%
  summarize(cumREV_2020 = max(cumREV_2020))

baseline <- filter(comp_dat_final, 
                   # take care of crab disaster
                   !(Year %in% c(2015, 2016) & grepl('CRAB', Species)) &
                     # not calculating for sardine because all years were disaster years
                     Species != 'SARDINE'  &
                     # pull the untreated values
                     CONF == 'NOT_TREATED' &
                     Metric == 'EXVESSEL_REVENUE' & 
                     Statistic == 'Total' &
                     Year != '2020' &
                     Interval == 'Weekly' &
                     !is.na(Metric)) %>%
  group_by(Species, State, Year) %>%
  mutate(cumREV = cumsum(Value)) %>%
  right_join(cutoff_2020) %>%
  group_by(Species, State) %>%
  summarise(cumREV_hist = median(cumREV))%>%
  subset(!is.na(Species))

baseline_2020 <- left_join(only_2020, baseline) %>%
  mutate(percchange = (cumREV_2020-cumREV_hist)/cumREV_hist*100) %>%
  mutate(percdiff = percdiff(cumREV_hist, cumREV_2020)) %>%
  select(-cumREV_2020, -cumREV_hist) %>%
  data.table()

# add filter for fisheries #
# 2) proportion within state ####
comp_dat_all_rmfsh <- comp_dat_all %>%
  mutate(rmfish = case_when(SPECIES_GROUP %in% rmfisheries_CA & AGENCY_CODE == 'C' ~ 1,
                            SPECIES_GROUP %in% rmfisheries_OR & AGENCY_CODE == 'O' ~ 1,
                            SPECIES_GROUP %in% rmfisheries_WA & AGENCY_CODE == 'W' ~ 1,
                            # Remove fixed gear-other for all states
                            SPECIES_GROUP == 'NON-WHITING GROUNDFISH NON-IFQ' & AGENCY_CODE == 'All' ~ 1,
                            !SPECIES_GROUP %in% c('CATCHER PROCESSOR',
                                                  'MOTHERSHIP',
                                                  'WHITING') & AGENCY_CODE == 'F' ~ 1,
                            T ~ 0)) %>%
  filter(rmfish != 1) %>%
  select(-rmfish)

sharewithinstate <- subset(comp_dat_all_rmfsh,
    Metric == 'EXVESSEL_REVENUE' & 
    YEAR %in% 2015:2019) %>%
  group_by(AGENCY_CODE, SPECIES_GROUP) %>%
  summarize(Value = sum(Value, na.rm = T)) %>%
  ungroup() %>%
  group_by(AGENCY_CODE) %>%
  mutate(state_prop = (Value/sum(Value, na.rm = T))*100) %>%
  select(-Value)
# 3) Share by month ######
sharewithinmonth <- subset(comp_dat_all_rmfsh,
    Metric == 'EXVESSEL_REVENUE' & 
    YEAR %in% 2015:2019) %>%
  group_by(AGENCY_CODE, SPECIES_GROUP, LANDING_MONTH) %>%
  summarize(Value = sum(Value, na.rm = T)) %>%
  ungroup() %>%
  group_by(AGENCY_CODE, SPECIES_GROUP) %>%
  mutate(month_prop = (Value/sum(Value, na.rm = T))*100) %>%
  mutate(select_month = factor(month.abb[LANDING_MONTH], levels = month.abb)) %>%
  select(-LANDING_MONTH, -Value)
# All filters ####
addlfilters <- full_join(sharewithinstate, sharewithinmonth) %>%
  rename(Species = SPECIES_GROUP,
    State = AGENCY_CODE) %>%
  full_join(baseline_2020) %>%
  ungroup() %>%
  mutate(Species = convert_sp(Species),
         Species = as.factor(Species),
    State = convert_state(State),
    State = as.factor(State),
    month_prop = case_when(is.na(month_prop) ~ NA_character_,
                           month_prop <= 5 ~ '0-5%',
                           month_prop > 5 & month_prop <= 10 ~ '5.1-10%',
                           month_prop > 10 & month_prop <= 15 ~ '10.1-15%',
                           month_prop > 15 & month_prop <= 20 ~ '15.1-20%',
                           month_prop > 20 ~ '> 20%',
                           T ~ 'help'),
    percchange = case_when(is.na(percchange) ~ 'Cannot be calculated',
                           percchange <= -35 ~ '\u2265 35% decrease', #\u2265 = greater than or equal to
                           percchange > -35 & percchange <= 0 ~ '< 35% decrease',
                           percchange > 0 & percchange <= 35 ~ '< 35% increase',
                           percchange > 35 ~ '\u2265 35% increase', #\u2265 = greater than or equal to
                           T ~ 'help'),
    state_prop = case_when(is.na(state_prop) ~ NA_character_,
                           state_prop <= 5 ~ '0-5%',
                           state_prop > 5 & state_prop <= 10 ~ '5.1-10%',
                           state_prop > 10 ~ '> 10%',
                           T ~ 'help')
    ) %>%
  data.frame()

saveRDS(addlfilters, "addlfilters.RDS")
#write.fst(addlfilters, "addlfilters.fst")

# Apply confidentiality at the state level. (i.e. if W is suppressed then All - (C+O) = W so need to suppress All) #####
# Do not apply to number of vessels/number of buyers
conf_state <- filter(comp_dat_final_cumul_0s, State != 'All' & !Metric %in% c('Number of buyers', 'Number of vessels')) %>%
  group_by(Year, Metric, Statistic, LANDING_MONTH, Interval, Species, Cumulative) %>%
  mutate(N_vss = case_when(is.na(N_vss) ~ 0,
                           T ~ as.numeric(N_vss)),
         N_buy = case_when(is.na(N_buy) ~ 0,
                           T ~ as.numeric(N_buy)),
         cases = case_when((N_vss < 3 & N_vss != 0 & !is.na(N_vss)) |
                             (N_buy < 3 & N_buy != 0 & !is.na(N_buy)) ~ 1,
                           T ~ 0)) %>%
  summarize(cases = sum(cases)) %>%
  mutate(State = 'All',
         conf = case_when(Species == 'WHITING' & State == 'All' & Year == 2020 ~ 0,
                          cases == 1 ~ 1,
                          T ~ 0)) %>% 
  select(-cases)
         
# Confidentiality at the additive species level. The only one is All non-whiting groundfish ####
# Same logic applies as for states, except if more than one sub-categories are suppressed then do not need to suppress 
# the All category 
conf_species <- filter(comp_dat_final_cumul_0s, Species %in% grndfsh_list & !Metric %in% c('Number of buyers', 'Number of vessels')) %>%
  group_by(Year, Metric, Statistic, LANDING_MONTH, Interval, State, Cumulative) %>%
  mutate(N_vss = case_when(is.na(N_vss) ~ 0,
                       T ~ as.numeric(N_vss)),
         N_buy = case_when(is.na(N_buy) ~ 0,
                           T ~ as.numeric(N_buy)),
         cases = case_when((N_vss < 3 & N_vss != 0 & !is.na(N_vss)) |
                             (N_buy < 3 & N_buy != 0 & !is.na(N_buy)) ~ 1,
                           T ~ 0)) %>%
  summarize(cases = sum(cases)) %>%
  mutate(Species = 'ALL NON-WHITING',
         conf2 = case_when(cases == 1 ~ 1,
                           T ~ 0)) %>% 
  select(-cases)
  
# Adding confidentiality checks
data_final <- full_join(conf_state, conf_species) %>%
  full_join(comp_dat_final_cumul_0s) %>%
  mutate(conf = case_when(is.na(conf) ~ 0,
                          T ~ conf),
         conf2 = case_when(is.na(conf2) ~ 0,
                           T ~ conf2), 
         Value = ifelse(conf == 1 | conf2 == 1, NA_real_, Value),
         Variance = ifelse(conf == 1 | conf2 == 1, NA_real_, Variance),
         q25 = ifelse(conf == 1 | conf2 == 1, NA_real_, q25),
         q75 = ifelse(conf == 1 | conf2 == 1, NA_real_, q75),
         # When we do the all combos merge if data is missing it shows up as NA.
         N_vss = case_when(is.na(N_vss) & Year != 'Baseline' & Cumulative != 'Y' ~ 0,
                           T ~ as.numeric(N_vss)),
         N_buy = case_when(is.na(N_buy) & Year != 'Baseline' & Cumulative != 'Y' ~ 0,
                           T ~ as.numeric(N_buy)),
         Value = case_when(N_vss == 0 & N_buy == 0 ~ 0,
                           T ~ Value)) %>%
  data.frame()

# Apply additive week/month confidentiality #####
# Rule = if only one week in month is suppressed then choose another month to suppress
# Chose by min(rev)

#Filter by weekly and treated because we only need to apply to weekly and the treated data
comp_dat_wk_conf <- data_final %>%
  filter(Interval == 'Weekly' & Cumulative == 'N' & Statistic == 'Total' &
      Metric == 'EXVESSEL_REVENUE') %>%
  # convert landing week to 2-digit character field
  mutate(
    LANDING_MONTH2 = case_when(
      LANDING_MONTH < 10 ~ paste0('0', LANDING_MONTH),
      T ~ as.character(LANDING_MONTH)
    ),
    # add arbitrary year for baseline
    LANDING_YEAR2 = case_when(Year == 'Baseline' ~ '2017', 
                              T ~ Year),
    date_string = case_when(
      LANDING_MONTH < 2   ~  paste0(LANDING_YEAR2, '/01/Mon'),
      LANDING_MONTH == 53 ~ paste0(LANDING_YEAR2, '/52/Mon'),
      LANDING_MONTH > 1   ~ paste(LANDING_YEAR2, LANDING_MONTH2, 'Mon', sep = "/")),
    first_day_of_week = as.Date(ymd(lubridate::parse_date_time(date_string, 'Y/W/a'))
      ),
    MONTH = month(first_day_of_week)
  ) %>%
  group_by(Species, State, Year, MONTH, Metric, Statistic) %>%
  # count the number of weeks in a month that are suppressed
  mutate(N_supp = sum(is.na(Value))) %>%
  # select the months that have one week suppressed; these are the ones that need additional conf
  filter(N_supp == 1) %>%
  ungroup() %>%
  # select needed columns (doing this just to simplify the logic)
  select(Species, State, Year, LANDING_MONTH, Interval, N_supp, Value, MONTH)

# This data frame will contain the combinations that should be suppressed
# and then which additional week to suppress by min total rev
comp_dat_wk_supp <- 
  # comp_dat_wk_conf is all of the MONTH-week-etc sets that need one more week suppressed
  # first we only keep the non-NA values
  filter(comp_dat_wk_conf, !is.na(Value)) %>%
  # then we find the "best" week in that combo to suppress (minimum of the remaining weeks)
  group_by(Species, State, Year, MONTH) %>%
  # This means select the min revenue value in the group
  top_n(-1, Value) %>%
  # If there is a tie we need to select one
  distinct(MONTH, .keep_all = T) %>%
  ungroup() %>%
  select(Species, State, Year, LANDING_MONTH, Interval, N_supp)

# Bind with the final dataframe and suppress values for those identified above.
comp_dat_final <- full_join(data_final, comp_dat_wk_supp) %>%
  mutate(N_supp = ifelse(is.na(N_supp),0,N_supp),
         Value = case_when(N_supp == 1 ~ NA_real_,
                           T ~ Value),
         Variance = case_when(N_supp == 1 ~ NA_real_,
                              T ~ Variance),
         q25 = case_when(N_supp == 1 ~ NA_real_,
                         T ~ q25),
         q75 = case_when(N_supp == 1 ~ NA_real_,
                         T ~ q75)) %>%
  select(-N_supp)

# Final formatting ####
app_data <-  comp_dat_final %>%
  ungroup() %>%
  mutate(Metric = case_when(Metric == 'EXVESSEL_REVENUE' ~ 'Exvessel revenue',
                            Metric == 'ROUND_WEIGHT_MTONS' ~ 'Landed weight (mt)',
                            Metric == 'price' ~ 'Price (per lb)',
                            T ~ as.character(Metric)),
         Species = convert_sp(Species),
         Species = as.factor(Species),
         State = convert_state(State),
         State = as.factor(State),
         Type = ifelse(Year %in% 2015:2019, '2015-2019',
                       Year)) %>%
  group_by(Metric, Statistic, Cumulative, Interval) %>%
  mutate(unit = case_when(max(Value, na.rm = T) < 1e3 ~ '',
                          max(Value, na.rm = T) < 1e6 ~ 'thousands',
                          max(Value, na.rm = T) < 1e9 ~ 'millions',
                          max(Value, na.rm = T) < 1e12 ~ 'billions'),
         Variance = case_when(Year != 2020 ~ NA_real_,
                              T ~ Variance),
         q25 = case_when(Year != 2020 ~ NA_real_, 
                         T ~ q25),
         q75 = case_when(Year != 2020 ~ NA_real_,
                         T ~ q75)
    )  %>%
  ungroup() %>%
  mutate(
    Year = as.factor(Year),
    Value = case_when(
      unit == '' ~ Value,
      unit == 'thousands' ~ Value/1e3,
      unit == 'millions' ~ Value/1e6,
      unit == 'billions' ~ Value/1e9,
      T ~ -999),
    Variance = case_when(
      unit == '' ~ Variance,
      unit == 'thousands' ~ Variance/1e3,
      unit == 'millions' ~ Variance/1e6,
      unit == 'billions' ~ Variance/1e9,
      T ~ -999),
    q25 = case_when(
      unit == '' ~ q25,
      unit == 'thousands' ~ q25/1e3,
      unit == 'millions' ~  q25/1e6,
      unit == 'billions' ~  q25/1e9,
      T ~ -999),
    q75 = case_when(
      unit == '' ~ q75,
      unit == 'thousands' ~ q75/1e3,
      unit == 'millions' ~  q75/1e6,
      unit == 'billions' ~  q75/1e9,
      T ~ -999),
    ylab = case_when(Metric %in% c('Exvessel revenue', 'Price (per lb)') ~
                       paste0(State, ": ", Species, "\n(", unit, " 2020$)"),
                     Metric == 'Landed weight (mt)' ~
                       paste0(State, ": ", Species, "\n(", unit, " mt)"),
                     Metric == 'Number of vessels' ~
                       paste0(State, ": ", Species, "\n(", unit, ")"), # from Marie: I think this is leading to # of vessels metrics to have "()" in label
                     T ~ paste(State, ": ", Species)),
    upper = case_when(Statistic == 'Mean' ~ Value + Variance,
                      Statistic == 'Median' ~ q75,
                      Statistic == 'Total' ~ Value),
    lower = case_when(Statistic == 'Mean' ~ Value - Variance,
                      Statistic == 'Median' ~ q25,
                      Statistic == 'Total' ~ Value),
    Type = ifelse(Type == 'Baseline', '2015-2019 Median', Type),
    Type = factor(Type, levels = c('2015-2019', '2015-2019 Median', '2020')),
    # Formatting the date so it can be plotted appropriately
    # Need to add zero in front of month
    LANDING_MONTH2 = case_when(
      LANDING_MONTH < 10 ~ paste0('0', LANDING_MONTH),
      T ~ as.character(LANDING_MONTH)
    ),
    Date = case_when(Interval == 'Weekly' & LANDING_MONTH < 2 ~ as.Date(paste0(Year,'-01-01')),
                     Interval == 'Weekly' & LANDING_MONTH > 1 ~ as.Date(lubridate::parse_date_time(
                       paste(Year, LANDING_MONTH2, 'Mon', sep="/"),'Y/W/a')),
                     Interval == 'Monthly' ~ ymd(paste0(Year, '-', LANDING_MONTH2, '-01'))),
    LANDING_MONTH = case_when(Interval == 'Weekly' & LANDING_MONTH < 2 ~ as.Date('2001-01-01'),
                              Interval == 'Weekly' & LANDING_MONTH > 1 ~ as.Date(lubridate::parse_date_time(
                                paste(2001, LANDING_MONTH2, 'Mon', sep="/"),'Y/W/a')),
                              Interval == 'Monthly' ~ ymd(paste0('2001', LANDING_MONTH2, '-01'))),
    # apply completeness/uncertainty logic. best understanding is that WA is 4 week lag, apply different logic for WA
    complete = case_when(State == 'Washington' & Statistic == 'Total' & Interval == 'Weekly' 
                          & Date >= wk4_completeness ~ "uncertain",
                         State == 'Washington' & Statistic == 'Total' & Interval == 'Monthly' & Year == 2020 &
                           month(Date) > wk4_month ~ "uncertain",
                         Interval == 'Weekly' & Date >= completeness_cutoff ~ "uncertain",
                         Interval == 'Monthly' & Year == 2020 & month(Date) > month_cutoff ~ "uncertain",
                         T ~ "complete"),
    no_pts = case_when(Type == '2015-2019' ~ 1,
                       Cumulative == 'Y' & Interval == 'Weekly' & Type == 'Baseline' ~ 1,
                       T ~ 0),
    # remove data they we don't want
    # Only want cumulative data when metric == exvessel revenue or weight
    rm_data = case_when(Cumulative == 'Y' &
                          !Metric %in% c('Exvessel revenue', 'Landed weight (mt)') ~ 1,
                        Statistic != 'Total' &
                          Metric %in% c('Number of vessels', 'Number of buyers') ~ 1,
                        Species == 'Whiting: Shorebased' & State != 'All' & Year == 2020 ~ 1,
                        T ~ 0),
    Value = case_when(grepl('Whiting', Species) & ((Interval == 'Monthly' & LANDING_MONTH2 %in% c('00', '01', '02', '03', '04')) 
                                                   | (Interval == 'Weekly' & LANDING_MONTH2 < 18)) ~ 0,
                      T ~Value)) %>%
  filter(rm_data != 1) %>%
  select(-rm_data) %>%
  data.frame() 

saveRDS(app_data, "comp_dat_covidapp.RDS")
#write.fst(app_data, "comp_dat_covidapp.fst")

# check conf changes when add N_buy to rule. expect to suppress more.
# new <- app_data %>%
#   select(Year, Metric, Statistic, LANDING_MONTH, Interval, Species, Cumulative, State, conf2, conf, N_vss, N_buy) %>%
#   rename(conf2_new = conf2,
#          conf_new = conf,
#          N = N_vss)
# 
# old <- comp_dat_covid_app %>%
#   select(Year, Metric, Statistic, LANDING_MONTH, Interval, Species, Cumulative, State, conf2, conf, N)
# 
# check <- merge(new, old, all = T)
# off <- filter(check, conf2_new > conf2)
# off <- filter(check, conf_new > conf)
# numbers of years where 2020 is lower

# only2020 <- subset(comp_dat_final, Year == 2020) %>%
#   subset(Metric == 'Exvessel revenue' & Statistic == 'Total') %>%
#   select(Species, State, LANDING_MONTH, Value) %>%
#   rename(yr_2020 = Value)
# 
# comp_table <- subset(comp_dat_final, Year != 2020) %>%
#   subset(Metric == 'Exvessel revenue' & Statistic == 'Total' & LANDING_MONTH %in% c('Jan', 'Feb', 'Mar')) %>%
#   select(Species, State, LANDING_MONTH, Year, Value) %>%
#   full_join(only2020) %>%
#   mutate(Value = ifelse(is.na(Value), 0, Value)) %>%
#   mutate(flag = ifelse(yr_2020 < .65*Value, '35 or more', 'less than 35')) %>%
#   ungroup() %>%
#   group_by(Species, State, LANDING_MONTH, flag) %>%
#   summarise(N = length(flag)) %>%
#   subset(flag == '35 or more' & State != 'Coastwide') %>%
#   subset(LANDING_MONTH == 'Mar') %>%
#   reshape::dcast(Species ~ State, value.var = 'N')

# Find fisheries that have historically had really low N
# low_act_fsh <- filter(app_data, Metric == 'Exvessel revenue' & Statistic == 'Total' & Cumulative == 'N'
#                            & Year != '2020' & Year != 'Baseline' & State != 'All' & N > 0) %>%
#   group_by(Species, State) %>%
#   summarize(N_avg = mean(N, na.rm = T))
# rm <- filter(low_act_fsh, N_avg < 3)
# non_existent_fsh <- filter(app_data, Metric == 'Exvessel revenue' & Statistic == 'Total' & Cumulative == 'N'
#                       & Year != '2020' & Year != 'Baseline' & State != 'All') %>%
#   group_by(Species, State) %>%
#   summarize(N_avg = mean(N, na.rm = T))
# rm2 <- filter(non_existent_fsh, N_avg == 0)
