#   mutate(Year = as.character(Year),
#          State = as.character(State))
# #
# new <- new_run_output %>%
#   select(Year, Metric, Statistic, Interval, Species, Cumulative, State, Dates_as_char, Value) %>%
#   mutate(Year = as.character(Year),
#          State = as.character(State))
# #
# all.equal(old, new)
all.equal(last_run_output, new_run_output)
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SAVE APP DATA ####
# If data meets checks, save
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
saveRDS(new, "comp_dat_covidapp.RDS")
shiny::runApp()
library(dplyr)
# Insert database connection information here #
library(odbc)
library(getPass)
library(fredr)
pacfin <- DBI::dbConnect(odbc::odbc(),
host   = "pacfindb.psmfc.org",
UID    = getPass('pacfin username'),
PWD    = getPass('pacfin password'),
dsn    = 'pacfin',
port   = 2045)
preventingprintingtoconsole <- dbSendQuery(pacfin, "alter session set current_schema=PACFIN_MARTS")
pacfin_dat_raw <- dbGetQuery(pacfin, "select landing_year,
landing_month,
landing_date,
agency_code,
ticket_source_code,
CASE WHEN
management_group_code IN ('SHLL','SRMP')
THEN nvl(TO_CHAR(vessel_id),fisher_license_num)
ELSE TO_CHAR(vessel_id)
END AS vessel_num,
agency_code || dealer_id AS dealer_num,
-- Formatting species groups
CASE WHEN
inpfc_area_type_code = 'PG' THEN 'PUGET SOUND FISHERIES'
WHEN pacfin_species_common_name like '%TUNA%' OR pacfin_species_common_name = 'ALBACORE'
THEN 'TUNA'
WHEN management_group_code = 'GRND' THEN
CASE WHEN IS_IFQ_LANDING = 'T' THEN
CASE WHEN pacfin_species_code = 'PWHT' THEN 'WHITING'
WHEN PACFIN_GEAR_CODE = 'MDT' THEN 'MIDWATER'
WHEN DAHL_GROUNDFISH_CODE = '14' THEN 'MIDWATER'
ELSE 'NON-WHITING GROUNDFISH IFQ' END
WHEN DAHL_GROUNDFISH_CODE IN ('05','06') THEN 'NEARSHORE GROUNDFISH'
WHEN DAHL_GROUNDFISH_CODE IN ('07','08','09','10','20') THEN 'OFFSHORE GROUNDFISH'
WHEN DAHL_GROUNDFISH_CODE IN ('11','12','13','14') THEN 'OTHER'
ELSE 'NON-WHITING GROUNDFISH NON-IFQ' END
WHEN
management_group_code = 'CPEL'
THEN CASE WHEN
pacfin_species_code = 'PSDN' THEN 'SARDINE'
WHEN
pacfin_species_code = 'NANC' THEN 'ANCHOVY'
WHEN
pacfin_species_code = 'MSQD' THEN 'MARKET SQUID'
WHEN
pacfin_species_code IN ('CMCK','JMCK','UMCK') THEN 'OTHER COASTAL PELAGIC'
ELSE 'OTHER'
END
WHEN
management_group_code = 'CRAB'
THEN CASE WHEN
pacfin_species_code = 'DCRB' THEN 'DUNGENESS CRAB'
ELSE 'OTHER CRAB'
END
-- CDK - Changind CPEL to Coastal Pelagic from Other and included only species specified by Steve Stohs as CPS
WHEN management_group_code = 'HMSP'
THEN 'OTHER'
WHEN management_group_code = 'SAMN'
THEN 'SALMON'
WHEN management_group_code = 'SRMP'
THEN 'SHRIMP'
WHEN management_group_code = 'SHLL'
THEN 'SHELLFISH'
WHEN nvl(management_group_code,'OTHR') = 'OTHR'
THEN 'OTHER'
ELSE 'CHECK'
END species_group,
SUM(round_weight_mtons) AS round_weight_mtons,
SUM(exvessel_revenue) AS exvessel_revenue
FROM comprehensive_ft
WHERE
participation_group_code in ('C')
-- Excluding ETIX, only want hard data --
-- AND is_etix_data = 'F'
-- Excluding Roe as in original script --
AND condition_code != 'E'
AND council_code IN ('P','*')
AND inpfc_area_type_code NOT IN ('CT','VC','GS')
AND landing_year >= 2014
AND exvessel_revenue > 0
-- Excluding tribal --
AND FLEET_CODE <> 'TI'
-- EXCLUDE SHELLFISH --
AND management_group_code != 'SHLL'
GROUP BY
landing_year,
landing_month,
landing_date,
agency_code,
ticket_source_code,
CASE WHEN
management_group_code IN ('SHLL','SRMP')
THEN nvl(TO_CHAR(vessel_id),fisher_license_num)
ELSE TO_CHAR(vessel_id)
END,
agency_code || dealer_id,
CASE WHEN
inpfc_area_type_code = 'PG' THEN 'PUGET SOUND FISHERIES'
WHEN pacfin_species_common_name like '%TUNA%' OR pacfin_species_common_name = 'ALBACORE'
THEN 'TUNA'
WHEN management_group_code = 'GRND' THEN
CASE WHEN IS_IFQ_LANDING = 'T' THEN
CASE WHEN pacfin_species_code = 'PWHT' THEN 'WHITING'
WHEN PACFIN_GEAR_CODE = 'MDT' THEN 'MIDWATER'
WHEN DAHL_GROUNDFISH_CODE = '14' THEN 'MIDWATER'
ELSE 'NON-WHITING GROUNDFISH IFQ' END
WHEN DAHL_GROUNDFISH_CODE IN ('05','06') THEN 'NEARSHORE GROUNDFISH'
WHEN DAHL_GROUNDFISH_CODE IN ('07','08','09','10','20') THEN 'OFFSHORE GROUNDFISH'
WHEN DAHL_GROUNDFISH_CODE IN ('11','12','13','14') THEN 'OTHER'
ELSE 'NON-WHITING GROUNDFISH NON-IFQ' END
WHEN
management_group_code = 'CPEL'
THEN CASE WHEN
pacfin_species_code = 'PSDN' THEN 'SARDINE'
WHEN
pacfin_species_code = 'NANC' THEN 'ANCHOVY'
WHEN
pacfin_species_code = 'MSQD' THEN 'MARKET SQUID'
WHEN
pacfin_species_code IN ('CMCK','JMCK','UMCK') THEN 'OTHER COASTAL PELAGIC'
ELSE 'OTHER'
END
WHEN
management_group_code = 'CRAB'
THEN CASE WHEN
pacfin_species_code = 'DCRB' THEN 'DUNGENESS CRAB'
ELSE 'OTHER CRAB'
END
-- CDK - Changind CPEL to Coastal Pelagic from Other and included only species specified by Steve Stohs as CPS
WHEN management_group_code = 'HMSP'
THEN 'OTHER'
WHEN management_group_code = 'SAMN'
THEN 'SALMON'
WHEN management_group_code = 'SRMP'
THEN 'SHRIMP'
WHEN management_group_code = 'SHLL'
THEN 'SHELLFISH'
WHEN nvl(management_group_code,'OTHR') = 'OTHR'
THEN 'OTHER'
ELSE 'CHECK'
END")
norpac_dat_raw <- dbGetQuery(pacfin, "SELECT landing_year,
landing_month,
landing_day,
'F' AS agency_code,
TO_CHAR(nvl2(catcher_vessel_id,catcher_vessel_id, processor_vessel_id)) AS vessel_num,
TO_CHAR(processor_vessel_id) AS dealer_num,
sector species_group,
SUM(retained_weight_mtons) AS round_weight_mtons,
SUM(exvessel_revenue) AS exvessel_revenue
FROM pacfin_marts.comprehensive_npac
WHERE pacfin_species_code != 'XXXX' AND retained_weight_lbs != 0 AND landing_year >= 2014 AND exvessel_revenue > 0
and sector <> 'TRIBAL' and pacfin_species_code = 'PWHT'
GROUP BY landing_year, landing_month, landing_day, nvl2(catcher_vessel_id,catcher_vessel_id,processor_vessel_id),
processor_vessel_id, sector") %>%
mutate(LANDING_DATE = as.POSIXct(paste0(LANDING_YEAR, "-", LANDING_MONTH,"-", LANDING_DAY),"%Y-%m-%d")) %>%
select(-LANDING_DAY)
comp_dat_raw <- rbind(pacfin_dat_raw,
norpac_dat_raw %>%
mutate(TICKET_SOURCE_CODE = NA_character_)) %>%
data.frame()
datpull_date <- Sys.Date()
# save the date stamp so we can use it in dataprep file
saveRDS(datpull_date, "datpull_date.RDS")
# save the raw data with a date stamp for "completeness monitoring"
saveRDS(comp_dat_raw, paste0("R:/Confidential/FISHEyE/data/landings_tracker/comp_dat_raw", datpull_date, ".RDS"))
# save the raw data without a date stamp for loading into data prep file
saveRDS(comp_dat_raw, "comp_dat_raw.RDS")
# Deflator #####
fredr_set_key('a5d92deb507a05eb5a7f84355a02f602')
fred_gdpdefl <- fredr(
series_id = "GDPDEF",
observation_start = as.Date("2015-01-01")
)
# prningsull and save the deflators
defl_adj <- mutate(fred_gdpdefl, LANDING_YEAR = format(date,"%Y")) %>%
group_by(LANDING_YEAR) %>%
summarize(defl = mean(value), .groups = 'drop') %>%
mutate(DEFL = defl/defl[LANDING_YEAR == 2021]) %>%
select(-defl) %>%
mutate(LANDING_YEAR = as.numeric(LANDING_YEAR))
# add 2021 until fredr is updated
# defl_2021 <- filter(defl_adj, LANDING_YEAR == 2020) %>%
#   mutate(LANDING_YEAR = 2021)
#
# defl_adj <- rbind(defl_adj, defl_2021)
saveRDS(defl_adj, paste0("R:/Confidential/FISHEyE/data/landings_tracker/defl", datpull_date, ".RDS"))
# testing
# This script pulls data and formats the dataframe for use in the app #
library(dplyr)
library(reshape2)
library(lubridate)
library(edcdataprep)
library(tidyr)
#devtools::install_github("sboysel/fredr")
library(fredr)
source("dataprep_fn.R")
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Generate updated covid app data ####
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# pull in the date stamp from the datapull file
datpull_date <- readRDS('datpull_date.RDS')
# load the deflators
gdp_defl <- readRDS(paste0("R:/Confidential/FISHEyE/data/landings_tracker/defl", datpull_date, ".RDS"))
# pull in data from datapull.R
comp_dat_raw_load <- readRDS(paste0('R:/Confidential/FISHEyE/data/landings_tracker/comp_dat_raw', datpull_date, '.RDS'))
# generate the new data
new <- dataprep_fn(comp_dat_raw_load, gdp_defl, datpull_date)
# save the data in the landings tracker folder with date stamp
saveRDS(new, paste0("R:/Confidential/FISHEyE/data/landings_tracker/comp_dat_covidapp", Sys.Date(), ".RDS"))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# TEST FOR DATA CHANGES ####
# This script compares changes in the raw data
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# datacompare.R
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# TEST SCRIPT CHANGES ####
# This should be run anytime modifications are made to a script
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# pull in the last "stable input/output"
# set the orig_date to pul'l in input and output data from the last time the outputs were "good"
orig_date <- '2021-07-14'
gdp_defl_last_run <- readRDS(paste0("R:/Confidential/FISHEyE/data/landings_tracker/defl", orig_date, ".RDS"))
last_run_raw  <- readRDS(paste0("R:/Confidential/FISHEyE/data/landings_tracker/comp_dat_raw", orig_date, ".RDS"))
last_run_output <- readRDS(paste0("R:/Confidential/FISHEyE/data/landings_tracker/comp_dat_covidapp", orig_date, ".RDS"))
# run the new code on the old raw data
new_run_output <- dataprep_fn(last_run_raw, gdp_defl_last_run, as.Date(orig_date))
#compare the outputs from the last "good" run to outputs from the latest run
# old <- last_run_output %>%
#   select(Year, Metric, Statistic, Interval, Species, Cumulative, State, Dates_as_char, Value) %>%
#   mutate(Year = as.character(Year),
#          State = as.character(State))
# #
# new <- new_run_output %>%
#   select(Year, Metric, Statistic, Interval, Species, Cumulative, State, Dates_as_char, Value) %>%
#   mutate(Year = as.character(Year),
#          State = as.character(State))
# #
# all.equal(old, new)
all.equal(last_run_output, new_run_output)
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SAVE APP DATA ####
# If data meets checks, save
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
saveRDS(new, "comp_dat_covidapp.RDS")
shiny::runApp()
library(dplyr)
# Insert database connection information here #
library(odbc)
library(getPass)
library(fredr)
pacfin <- DBI::dbConnect(odbc::odbc(),
host   = "pacfindb.psmfc.org",
UID    = getPass('pacfin username'),
PWD    = getPass('pacfin password'),
dsn    = 'pacfin',
port   = 2045)
preventingprintingtoconsole <- dbSendQuery(pacfin, "alter session set current_schema=PACFIN_MARTS")
pacfin_dat_raw <- dbGetQuery(pacfin, "select landing_year,
landing_month,
landing_date,
agency_code,
ticket_source_code,
CASE WHEN
management_group_code IN ('SHLL','SRMP')
THEN nvl(TO_CHAR(vessel_id),fisher_license_num)
ELSE TO_CHAR(vessel_id)
END AS vessel_num,
agency_code || dealer_id AS dealer_num,
-- Formatting species groups
CASE WHEN
inpfc_area_type_code = 'PG' THEN 'PUGET SOUND FISHERIES'
WHEN pacfin_species_common_name like '%TUNA%' OR pacfin_species_common_name = 'ALBACORE'
THEN 'TUNA'
WHEN management_group_code = 'GRND' THEN
CASE WHEN IS_IFQ_LANDING = 'T' THEN
CASE WHEN pacfin_species_code = 'PWHT' THEN 'WHITING'
WHEN PACFIN_GEAR_CODE = 'MDT' THEN 'MIDWATER'
WHEN DAHL_GROUNDFISH_CODE = '14' THEN 'MIDWATER'
ELSE 'NON-WHITING GROUNDFISH IFQ' END
WHEN DAHL_GROUNDFISH_CODE IN ('05','06') THEN 'NEARSHORE GROUNDFISH'
WHEN DAHL_GROUNDFISH_CODE IN ('07','08','09','10','20') THEN 'OFFSHORE GROUNDFISH'
WHEN DAHL_GROUNDFISH_CODE IN ('11','12','13','14') THEN 'OTHER'
ELSE 'NON-WHITING GROUNDFISH NON-IFQ' END
WHEN
management_group_code = 'CPEL'
THEN CASE WHEN
pacfin_species_code = 'PSDN' THEN 'SARDINE'
WHEN
pacfin_species_code = 'NANC' THEN 'ANCHOVY'
WHEN
pacfin_species_code = 'MSQD' THEN 'MARKET SQUID'
WHEN
pacfin_species_code IN ('CMCK','JMCK','UMCK') THEN 'OTHER COASTAL PELAGIC'
ELSE 'OTHER'
END
WHEN
management_group_code = 'CRAB'
THEN CASE WHEN
pacfin_species_code = 'DCRB' THEN 'DUNGENESS CRAB'
ELSE 'OTHER CRAB'
END
-- CDK - Changind CPEL to Coastal Pelagic from Other and included only species specified by Steve Stohs as CPS
WHEN management_group_code = 'HMSP'
THEN 'OTHER'
WHEN management_group_code = 'SAMN'
THEN 'SALMON'
WHEN management_group_code = 'SRMP'
THEN 'SHRIMP'
WHEN management_group_code = 'SHLL'
THEN 'SHELLFISH'
WHEN nvl(management_group_code,'OTHR') = 'OTHR'
THEN 'OTHER'
ELSE 'CHECK'
END species_group,
SUM(round_weight_mtons) AS round_weight_mtons,
SUM(exvessel_revenue) AS exvessel_revenue
FROM comprehensive_ft
WHERE
participation_group_code in ('C')
-- Excluding ETIX, only want hard data --
-- AND is_etix_data = 'F'
-- Excluding Roe as in original script --
AND condition_code != 'E'
AND council_code IN ('P','*')
AND inpfc_area_type_code NOT IN ('CT','VC','GS')
AND landing_year >= 2014
AND exvessel_revenue > 0
-- Excluding tribal --
AND FLEET_CODE <> 'TI'
-- EXCLUDE SHELLFISH --
AND management_group_code != 'SHLL'
GROUP BY
landing_year,
landing_month,
landing_date,
agency_code,
ticket_source_code,
CASE WHEN
management_group_code IN ('SHLL','SRMP')
THEN nvl(TO_CHAR(vessel_id),fisher_license_num)
ELSE TO_CHAR(vessel_id)
END,
agency_code || dealer_id,
CASE WHEN
inpfc_area_type_code = 'PG' THEN 'PUGET SOUND FISHERIES'
WHEN pacfin_species_common_name like '%TUNA%' OR pacfin_species_common_name = 'ALBACORE'
THEN 'TUNA'
WHEN management_group_code = 'GRND' THEN
CASE WHEN IS_IFQ_LANDING = 'T' THEN
CASE WHEN pacfin_species_code = 'PWHT' THEN 'WHITING'
WHEN PACFIN_GEAR_CODE = 'MDT' THEN 'MIDWATER'
WHEN DAHL_GROUNDFISH_CODE = '14' THEN 'MIDWATER'
ELSE 'NON-WHITING GROUNDFISH IFQ' END
WHEN DAHL_GROUNDFISH_CODE IN ('05','06') THEN 'NEARSHORE GROUNDFISH'
WHEN DAHL_GROUNDFISH_CODE IN ('07','08','09','10','20') THEN 'OFFSHORE GROUNDFISH'
WHEN DAHL_GROUNDFISH_CODE IN ('11','12','13','14') THEN 'OTHER'
ELSE 'NON-WHITING GROUNDFISH NON-IFQ' END
WHEN
management_group_code = 'CPEL'
THEN CASE WHEN
pacfin_species_code = 'PSDN' THEN 'SARDINE'
WHEN
pacfin_species_code = 'NANC' THEN 'ANCHOVY'
WHEN
pacfin_species_code = 'MSQD' THEN 'MARKET SQUID'
WHEN
pacfin_species_code IN ('CMCK','JMCK','UMCK') THEN 'OTHER COASTAL PELAGIC'
ELSE 'OTHER'
END
WHEN
management_group_code = 'CRAB'
THEN CASE WHEN
pacfin_species_code = 'DCRB' THEN 'DUNGENESS CRAB'
ELSE 'OTHER CRAB'
END
-- CDK - Changind CPEL to Coastal Pelagic from Other and included only species specified by Steve Stohs as CPS
WHEN management_group_code = 'HMSP'
THEN 'OTHER'
WHEN management_group_code = 'SAMN'
THEN 'SALMON'
WHEN management_group_code = 'SRMP'
THEN 'SHRIMP'
WHEN management_group_code = 'SHLL'
THEN 'SHELLFISH'
WHEN nvl(management_group_code,'OTHR') = 'OTHR'
THEN 'OTHER'
ELSE 'CHECK'
END")
norpac_dat_raw <- dbGetQuery(pacfin, "SELECT landing_year,
landing_month,
landing_day,
'F' AS agency_code,
TO_CHAR(nvl2(catcher_vessel_id,catcher_vessel_id, processor_vessel_id)) AS vessel_num,
TO_CHAR(processor_vessel_id) AS dealer_num,
sector species_group,
SUM(retained_weight_mtons) AS round_weight_mtons,
SUM(exvessel_revenue) AS exvessel_revenue
FROM pacfin_marts.comprehensive_npac
WHERE pacfin_species_code != 'XXXX' AND retained_weight_lbs != 0 AND landing_year >= 2014 AND exvessel_revenue > 0
and sector <> 'TRIBAL' and pacfin_species_code = 'PWHT'
GROUP BY landing_year, landing_month, landing_day, nvl2(catcher_vessel_id,catcher_vessel_id,processor_vessel_id),
processor_vessel_id, sector") %>%
mutate(LANDING_DATE = as.POSIXct(paste0(LANDING_YEAR, "-", LANDING_MONTH,"-", LANDING_DAY),"%Y-%m-%d")) %>%
select(-LANDING_DAY)
comp_dat_raw <- rbind(pacfin_dat_raw,
norpac_dat_raw %>%
mutate(TICKET_SOURCE_CODE = NA_character_)) %>%
data.frame()
datpull_date <- Sys.Date()
# save the date stamp so we can use it in dataprep file
saveRDS(datpull_date, "datpull_date.RDS")
# save the raw data with a date stamp for "completeness monitoring"
saveRDS(comp_dat_raw, paste0("R:/Confidential/FISHEyE/data/landings_tracker/comp_dat_raw", datpull_date, ".RDS"))
# save the raw data without a date stamp for loading into data prep file
saveRDS(comp_dat_raw, "comp_dat_raw.RDS")
# Deflator #####
fredr_set_key('a5d92deb507a05eb5a7f84355a02f602')
fred_gdpdefl <- fredr(
series_id = "GDPDEF",
observation_start = as.Date("2015-01-01")
)
# prningsull and save the deflators
defl_adj <- mutate(fred_gdpdefl, LANDING_YEAR = format(date,"%Y")) %>%
group_by(LANDING_YEAR) %>%
summarize(defl = mean(value), .groups = 'drop') %>%
mutate(DEFL = defl/defl[LANDING_YEAR == 2021]) %>%
select(-defl) %>%
mutate(LANDING_YEAR = as.numeric(LANDING_YEAR))
# add 2021 until fredr is updated
# defl_2021 <- filter(defl_adj, LANDING_YEAR == 2020) %>%
#   mutate(LANDING_YEAR = 2021)
#
# defl_adj <- rbind(defl_adj, defl_2021)
saveRDS(defl_adj, paste0("R:/Confidential/FISHEyE/data/landings_tracker/defl", datpull_date, ".RDS"))
# testing
# This script pulls data and formats the dataframe for use in the app #
library(dplyr)
library(reshape2)
library(lubridate)
library(edcdataprep)
library(tidyr)
#devtools::install_github("sboysel/fredr")
library(fredr)
source("dataprep_fn.R")
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Generate updated covid app data ####
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# pull in the date stamp from the datapull file
datpull_date <- readRDS('datpull_date.RDS')
# load the deflators
gdp_defl <- readRDS(paste0("R:/Confidential/FISHEyE/data/landings_tracker/defl", datpull_date, ".RDS"))
# pull in data from datapull.R
comp_dat_raw_load <- readRDS(paste0('R:/Confidential/FISHEyE/data/landings_tracker/comp_dat_raw', datpull_date, '.RDS'))
# generate the new data
new <- dataprep_fn(comp_dat_raw_load, gdp_defl, datpull_date)
# save the data in the landings tracker folder with date stamp
saveRDS(new, paste0("R:/Confidential/FISHEyE/data/landings_tracker/comp_dat_covidapp", Sys.Date(), ".RDS"))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# TEST FOR DATA CHANGES ####
# This script compares changes in the raw data
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# datacompare.R
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# TEST SCRIPT CHANGES ####
# This should be run anytime modifications are made to a script
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# pull in the last "stable input/output"
# set the orig_date to pul'l in input and output data from the last time the outputs were "good"
orig_date <- '2021-07-21'
gdp_defl_last_run <- readRDS(paste0("R:/Confidential/FISHEyE/data/landings_tracker/defl", orig_date, ".RDS"))
last_run_raw  <- readRDS(paste0("R:/Confidential/FISHEyE/data/landings_tracker/comp_dat_raw", orig_date, ".RDS"))
last_run_output <- readRDS(paste0("R:/Confidential/FISHEyE/data/landings_tracker/comp_dat_covidapp", orig_date, ".RDS"))
# run the new code on the old raw data
new_run_output <- dataprep_fn(last_run_raw, gdp_defl_last_run, as.Date(orig_date))
#compare the outputs from the last "good" run to outputs from the latest run
# old <- last_run_output %>%
#   select(Year, Metric, Statistic, Interval, Species, Cumulative, State, Dates_as_char, Value) %>%
#   mutate(Year = as.character(Year),
#          State = as.character(State))
# #
# new <- new_run_output %>%
#   select(Year, Metric, Statistic, Interval, Species, Cumulative, State, Dates_as_char, Value) %>%
#   mutate(Year = as.character(Year),
#          State = as.character(State))
# #
# all.equal(old, new)
all.equal(last_run_output, new_run_output)
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SAVE APP DATA ####
# If data meets checks, save
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
saveRDS(new, "comp_dat_covidapp.RDS")
shiny::runApp()
